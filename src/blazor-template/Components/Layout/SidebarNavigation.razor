@rendermode InteractiveServer
@using BlazorTemplate.Services.Navigation
@using BlazorTemplate.Configuration.Navigation
@using BlazorTemplate.Services.Auth
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@inject INavigationService NavigationService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IUserRoleService RoleService
@inject NavigationManager Navigation

<!-- Sidebar Navigation -->
<aside id="sidebar" class="fixed top-16 left-0 w-64 h-[calc(100vh-4rem)] bg-white/95 backdrop-blur-md border-r border-gray-200/50 z-40 transition-transform duration-300 transform -translate-x-full lg:translate-x-0">
    <div class="sidebar-scroll h-full overflow-y-auto py-6">
        @if (navigationItems != null && navigationItems.Any())
        {
            @foreach (var item in navigationItems)
            {
                @if (item.IsGroup && item.Children != null && item.Children.Any())
                {
                    <!-- Group Section -->
                    <div class="px-4 mb-6">
                        <div class="flex items-center gap-2 px-4 mb-3">
                            <div class="h-px bg-gradient-to-r from-gray-300 to-transparent flex-1"></div>
                            <h3 class="text-xs font-medium text-gray-500 uppercase tracking-wider">@item.Title</h3>
                            <div class="h-px bg-gradient-to-l from-gray-300 to-transparent flex-1"></div>
                        </div>
                        
                        @foreach (var child in item.Children)
                        {
                            <a href="@child.Href" 
                               class="nav-item group flex items-center gap-3 mx-2 px-3 py-2.5 text-gray-600 rounded-xl transition-all duration-200 hover:bg-gray-50 hover:text-dark hover:shadow-sm @(IsActiveRoute(child.Href) ? "bg-primary/10 text-primary active" : "")">
                                <div class="flex items-center justify-center w-8 h-8 bg-gray-100 rounded-lg group-hover:bg-gray-200 transition-colors @(IsActiveRoute(child.Href) ? "bg-primary/20" : "")">
                                    <i class="@child.Icon text-sm"></i>
                                </div>
                                <span class="font-medium text-sm">@child.Title</span>
                                @if (IsActiveRoute(child.Href))
                                {
                                    <div class="ml-auto w-2 h-2 bg-primary rounded-full opacity-100"></div>
                                }
                            </a>
                        }
                    </div>
                }
                else if (!item.IsGroup)
                {
                    <!-- Individual Item -->
                    <div class="px-4 mb-6">
                        <a href="@item.Href" 
                           class="nav-item group flex items-center gap-3 mx-2 px-3 py-2.5 text-gray-600 rounded-xl transition-all duration-200 hover:bg-gray-50 hover:text-dark hover:shadow-sm @(IsActiveRoute(item.Href) ? "bg-primary/10 text-primary active" : "")">
                            <div class="flex items-center justify-center w-8 h-8 bg-gray-100 rounded-lg group-hover:bg-gray-200 transition-colors @(IsActiveRoute(item.Href) ? "bg-primary/20" : "")">
                                <i class="@item.Icon text-sm"></i>
                            </div>
                            <span class="font-medium text-sm">@item.Title</span>
                            @if (IsActiveRoute(item.Href))
                            {
                                <div class="ml-auto w-2 h-2 bg-primary rounded-full opacity-100"></div>
                            }
                        </a>
                    </div>
                }
            }
        }
        else
        {
            <!-- Fallback static navigation if service fails -->
            <div class="px-4 mb-6">
                <a href="/" class="nav-item group flex items-center gap-3 mx-2 px-3 py-2.5 text-dark bg-primary/10 text-primary rounded-xl transition-all duration-200 hover:shadow-md active">
                    <div class="flex items-center justify-center w-8 h-8 bg-primary/20 rounded-lg group-hover:bg-primary/30 transition-colors">
                        <i class="fas fa-home text-sm"></i>
                    </div>
                    <span class="font-medium text-sm">Home</span>
                    <div class="ml-auto w-2 h-2 bg-primary rounded-full opacity-100"></div>
                </a>
            </div>
            
            @if (isAuthenticated)
            {
                <!-- Resources Section -->
                <div class="px-4 mb-6">
                    <div class="flex items-center gap-2 px-4 mb-3">
                        <div class="h-px bg-gradient-to-r from-gray-300 to-transparent flex-1"></div>
                        <h3 class="text-xs font-medium text-gray-500 uppercase tracking-wider">User</h3>
                        <div class="h-px bg-gradient-to-l from-gray-300 to-transparent flex-1"></div>
                    </div>
                    <a href="/Account/Manage" class="nav-item group flex items-center gap-3 mx-2 px-3 py-2.5 text-gray-600 rounded-xl transition-all duration-200 hover:bg-gray-50 hover:text-dark hover:shadow-sm">
                        <div class="flex items-center justify-center w-8 h-8 bg-gray-100 rounded-lg group-hover:bg-gray-200 transition-colors">
                            <i class="fas fa-user text-sm"></i>
                        </div>
                        <span class="font-medium text-sm">My Profile</span>
                    </a>
                </div>
                
                @if (isAdmin)
                {
                    <!-- Admin Section -->
                    <div class="px-4 mb-6">
                        <div class="flex items-center gap-2 px-4 mb-3">
                            <div class="h-px bg-gradient-to-r from-gray-300 to-transparent flex-1"></div>
                            <h3 class="text-xs font-medium text-gray-500 uppercase tracking-wider">Administration</h3>
                            <div class="h-px bg-gradient-to-l from-gray-300 to-transparent flex-1"></div>
                        </div>
                        <a href="/Admin/Dashboard" class="nav-item group flex items-center gap-3 mx-2 px-3 py-2.5 text-gray-600 rounded-xl transition-all duration-200 hover:bg-gray-50 hover:text-dark hover:shadow-sm">
                            <div class="flex items-center justify-center w-8 h-8 bg-gray-100 rounded-lg group-hover:bg-gray-200 transition-colors">
                                <i class="fas fa-tachometer-alt text-sm"></i>
                            </div>
                            <span class="font-medium text-sm">Dashboard</span>
                        </a>
                        <a href="/Admin/Users" class="nav-item group flex items-center gap-3 mx-2 px-3 py-2.5 text-gray-600 rounded-xl transition-all duration-200 hover:bg-gray-50 hover:text-dark hover:shadow-sm">
                            <div class="flex items-center justify-center w-8 h-8 bg-gray-100 rounded-lg group-hover:bg-gray-200 transition-colors">
                                <i class="fas fa-users text-sm"></i>
                            </div>
                            <span class="font-medium text-sm">Users</span>
                        </a>
                        <a href="/Admin/Roles" class="nav-item group flex items-center gap-3 mx-2 px-3 py-2.5 text-gray-600 rounded-xl transition-all duration-200 hover:bg-gray-50 hover:text-dark hover:shadow-sm">
                            <div class="flex items-center justify-center w-8 h-8 bg-gray-100 rounded-lg group-hover:bg-gray-200 transition-colors">
                                <i class="fas fa-user-shield text-sm"></i>
                            </div>
                            <span class="font-medium text-sm">Roles</span>
                        </a>
                    </div>
                }
            }
            else
            {
                <!-- User Section for non-authenticated -->
                <div class="px-4 mb-6">
                    <div class="flex items-center gap-2 px-4 mb-3">
                        <div class="h-px bg-gradient-to-r from-gray-300 to-transparent flex-1"></div>
                        <h3 class="text-xs font-medium text-gray-500 uppercase tracking-wider">User</h3>
                        <div class="h-px bg-gradient-to-l from-gray-300 to-transparent flex-1"></div>
                    </div>
                    <a href="/Account/Login" class="nav-item group flex items-center gap-3 mx-2 px-3 py-2.5 text-gray-600 rounded-xl transition-all duration-200 hover:bg-gray-50 hover:text-dark hover:shadow-sm">
                        <div class="flex items-center justify-center w-8 h-8 bg-gray-100 rounded-lg group-hover:bg-gray-200 transition-colors">
                            <i class="fas fa-sign-in-alt text-sm"></i>
                        </div>
                        <span class="font-medium text-sm">Login</span>
                    </a>
                    <a href="/Account/Register" class="nav-item group flex items-center gap-3 mx-2 px-3 py-2.5 text-gray-600 rounded-xl transition-all duration-200 hover:bg-gray-50 hover:text-dark hover:shadow-sm">
                        <div class="flex items-center justify-center w-8 h-8 bg-gray-100 rounded-lg group-hover:bg-gray-200 transition-colors">
                            <i class="fas fa-user-plus text-sm"></i>
                        </div>
                        <span class="font-medium text-sm">Register</span>
                    </a>
                </div>
            }
        }
    </div>
</aside>

@code {
    private List<NavigationItem>? navigationItems;
    private bool isAuthenticated;
    private bool isAdmin;
    private string currentPath = "";

    protected override async Task OnInitializedAsync()
    {
        // Get authentication state
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        isAuthenticated = authState.User?.Identity?.IsAuthenticated ?? false;
        
        // Check if user is admin
        isAdmin = authState.User?.IsInRole("Administrator") ?? false;
        
        // Get current path for active state
        currentPath = Navigation.ToBaseRelativePath(Navigation.Uri);
        
        var user = authState.User;
        List<string> userRoles = [];

        if (user != null && user.Identity != null && user.Identity.IsAuthenticated)
        {
            var email = user.FindFirst(ClaimTypes.Email) ??
                user.FindFirst("email") ??
                user.FindFirst("preferred_username");

            try
            {
                var roles = await RoleService.GetUserRolesAsync(email?.Value);
                userRoles.AddRange(roles);
            }
            catch (Exception)
            {
                // Handle case where user might not be found in role service yet
                userRoles = new List<string>();
            }
        }
        else
        {
            // If user is not authenticated, add "Anonymous" role
            userRoles.Add("Anonymous");
        }

        try
        {
            // Get navigation items from service
            navigationItems = await NavigationService.GetNavigationItemsForUserAsync(userRoles);
        }
        catch (Exception)
        {
            // Navigation service failed, will use fallback navigation
            navigationItems = null;
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        // Update current path when navigation changes
        currentPath = Navigation.ToBaseRelativePath(Navigation.Uri);
        await InvokeAsync(StateHasChanged);
    }

    private bool IsActiveRoute(string? url)
    {
        if (string.IsNullOrEmpty(url) || string.IsNullOrEmpty(currentPath))
            return false;

        // Handle root route
        if (url == "/" && currentPath == "")
            return true;

        // Remove leading slash for comparison
        var cleanUrl = url.TrimStart('/');
        var cleanPath = currentPath.TrimStart('/');

        // Exact match or starts with path segment
        return cleanPath == cleanUrl || cleanPath.StartsWith(cleanUrl + "/");
    }
}