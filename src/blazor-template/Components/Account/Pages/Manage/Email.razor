@page "/Account/Manage/Email"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using BlazorTemplate
@using BlazorTemplate.Components
@using BlazorTemplate.Components.Account.Shared
@using BlazorTemplate.Data
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities

@inject UserManager<ApplicationUser> UserManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject IdentityUserAccessor UserAccessor
@inject NavigationManager NavigationManager

<PageTitle>Manage email</PageTitle>

<style>
    .email-header {
        display: flex;
        align-items: center;
        gap: 1rem;
        margin-bottom: 2rem;
    }

    .email-icon {
        width: 60px;
        height: 60px;
        border-radius: 12px;
        background: linear-gradient(135deg, var(--color-primary), var(--color-secondary));
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        font-size: 1.5rem;
        box-shadow: 0 4px 12px rgba(120, 39, 137, 0.3);
    }

    .email-info h2 {
        margin: 0;
        font-size: 1.75rem;
        font-weight: 600;
        color: var(--color-dark);
    }

    .email-info p {
        margin: 0.25rem 0 0 0;
        color: #6c757d;
        font-size: 1rem;
    }

    .current-email-section {
        background: white;
        border: 2px solid #e9ecef;
        border-radius: 12px;
        padding: 2rem;
        margin-bottom: 2rem;
        transition: all 0.3s ease;
    }

        .current-email-section:hover {
            border-color: var(--color-primary);
            box-shadow: 0 4px 12px rgba(120, 39, 137, 0.1);
        }

    .section-header {
        display: flex;
        align-items: center;
        gap: 1rem;
        margin-bottom: 1.5rem;
        padding-bottom: 1rem;
        border-bottom: 2px solid #e9ecef;
    }

    .section-icon {
        width: 40px;
        height: 40px;
        border-radius: 8px;
        background: linear-gradient(135deg, var(--color-primary), var(--color-secondary));
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        font-size: 1.1rem;
    }

    .section-title {
        font-size: 1.25rem;
        font-weight: 600;
        color: var(--color-dark);
        margin: 0;
    }

    .email-status-card {
        background: linear-gradient(135deg, #f8f9fa, #e9ecef);
        border: 2px solid #dee2e6;
        border-radius: 12px;
        padding: 1.5rem;
        margin-bottom: 1.5rem;
    }

        .email-status-card.verified {
            background: linear-gradient(135deg, #d4edda, #c3e6cb);
            border-color: var(--color-success);
        }

        .email-status-card.unverified {
            background: linear-gradient(135deg, #fff3cd, #ffeaa7);
            border-color: var(--color-warning);
        }

    .status-header {
        display: flex;
        align-items: center;
        gap: 1rem;
        margin-bottom: 1rem;
    }

    .status-indicator {
        width: 48px;
        height: 48px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 1.25rem;
        color: white;
    }

        .status-indicator.verified {
            background: var(--color-success);
        }

        .status-indicator.unverified {
            background: var(--color-warning);
        }

    .status-info h4 {
        margin: 0;
        font-size: 1.1rem;
        font-weight: 600;
    }

    .status-info p {
        margin: 0.25rem 0 0 0;
        font-size: 0.9rem;
        opacity: 0.8;
    }

    .email-display {
        font-family: 'Courier New', monospace;
        font-size: 1.1rem;
        font-weight: 600;
        padding: 0.75rem 1rem;
        background: rgba(255, 255, 255, 0.7);
        border-radius: 8px;
        margin: 1rem 0;
        word-break: break-all;
    }

    .verification-actions {
        display: flex;
        gap: 1rem;
        flex-wrap: wrap;
        margin-top: 1rem;
    }

    .change-email-section {
        background: white;
        border: 2px solid #e9ecef;
        border-radius: 12px;
        padding: 2rem;
        position: relative;
        transition: all 0.3s ease;
    }

        .change-email-section:hover {
            border-color: var(--color-primary);
            box-shadow: 0 4px 12px rgba(120, 39, 137, 0.1);
        }

    .form-group {
        margin-bottom: 1.5rem;
    }

    .email-help {
        background: #e8f4fd;
        border: 2px solid #bee5eb;
        border-radius: 8px;
        padding: 1rem;
        margin-top: 1rem;
        font-size: 0.9rem;
        color: #0c5460;
    }

    .help-title {
        font-weight: 600;
        margin-bottom: 0.5rem;
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .submit-section {
        background: linear-gradient(135deg, #f8f9fa, #e9ecef);
        border: 2px solid #dee2e6;
        border-radius: 12px;
        padding: 2rem;
        text-align: center;
        margin-top: 2rem;
    }

    .submit-info {
        margin-bottom: 1.5rem;
    }

        .submit-info h4 {
            margin: 0 0 0.5rem 0;
            color: var(--color-dark);
            font-size: 1.1rem;
        }

        .submit-info p {
            margin: 0;
            color: #6c757d;
            font-size: 0.9rem;
        }

    .submit-actions {
        display: flex;
        gap: 1rem;
        justify-content: center;
        flex-wrap: wrap;
    }

    /* Loading states */
    .loading-button {
        position: relative;
        overflow: hidden;
    }

    .saving-overlay {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(255, 255, 255, 0.9);
        display: flex;
        align-items: center;
        justify-content: center;
        border-radius: 12px;
        z-index: 10;
    }

    .spinner {
        width: 2rem;
        height: 2rem;
        border: 3px solid #e9ecef;
        border-top: 3px solid var(--color-primary);
        border-radius: 50%;
        animation: spin 1s linear infinite;
    }

    @@keyframes spin {
        0%

    {
        transform: rotate(0deg);
    }

    100% {
        transform: rotate(360deg);
    }

    }

    /* Success/Error animations */
    .status-success {
        animation: successPulse 0.6s ease-in-out;
    }

    .status-error {
        animation: errorShake 0.5s ease-in-out;
    }

    @@keyframes successPulse {
        0%

    {
        transform: scale(1);
    }

    50% {
        transform: scale(1.05);
    }

    100% {
        transform: scale(1);
    }

    }

    @@keyframes errorShake {
        0%, 100%

    {
        transform: translateX(0);
    }

    10%, 30%, 50%, 70%, 90% {
        transform: translateX(-3px);
    }

    20%, 40%, 60%, 80% {
        transform: translateX(3px);
    }

    }

    /* Mobile responsive */
    @@media (max-width: 768px) {
        .email-header

    {
        text-align: center;
        flex-direction: column;
    }

    .current-email-section,
    .change-email-section {
        padding: 1.5rem;
    }

    .verification-actions {
        flex-direction: column;
    }

        .verification-actions .btn {
            width: 100%;
        }

    .submit-actions {
        flex-direction: column;
    }

        .submit-actions .btn {
            width: 100%;
        }

    .email-display {
        font-size: 1rem;
        word-break: break-all;
    }

    }
</style>

<!-- Page Header -->
<div class="email-header">
    <div class="email-icon">
        <i class="fas fa-envelope"></i>
    </div>
    <div class="email-info">
        <h2>Email Management</h2>
        <p>Manage your email address and verification status</p>
    </div>
</div>

<!-- Status Message -->
<StatusMessage Message="@message" />

<!-- Current Email Section -->
<div class="current-email-section">
    <div class="section-header">
        <div class="section-icon">
            <i class="fas fa-envelope-circle-check"></i>
        </div>
        <div>
            <h3 class="section-title">Current Email Address</h3>
        </div>
    </div>

    <div class="email-status-card @(isEmailConfirmed ? "verified" : "unverified")">
        <div class="status-header">
            <div class="status-indicator @(isEmailConfirmed ? "verified" : "unverified")">
                <i class="fas @(isEmailConfirmed ? "fa-check" : "fa-exclamation")"></i>
            </div>
            <div class="status-info">
                <h4>@(isEmailConfirmed ? "Email Verified" : "Email Not Verified")</h4>
                <p>@(isEmailConfirmed ? "Your email address has been confirmed" : "Please verify your email address")</p>
            </div>
        </div>

        <div class="email-display">
            @email
        </div>

        @if (!isEmailConfirmed)
        {
            <div class="verification-actions">
                <form @onsubmit="OnSendEmailVerificationAsync" @formname="send-verification" id="send-verification-form" method="post">
                    <AntiforgeryToken />
                    <button type="submit" class="btn btn-primary @(isSendingVerification ? "loading-button" : "")" disabled="@isSendingVerification">
                        @if (isSendingVerification)
                        {
                            <i class="fas fa-spinner fa-spin me-2"></i>
                            <span>Sending...</span>
                        }
                        else
                        {
                            <i class="fas fa-paper-plane me-2"></i>
                            <span>Send Verification Email</span>
                        }
                    </button>
                </form>
            </div>

            <div class="email-help">
                <div class="help-title">
                    <i class="fas fa-info-circle"></i>
                    <span>Why verify your email?</span>
                </div>
                <ul style="margin: 0.5rem 0 0 1.5rem; padding: 0;">
                    <li>Enable password recovery</li>
                    <li>Receive important account notifications</li>
                    <li>Enhanced account security</li>
                    <li>Access to email-based features</li>
                </ul>
            </div>
        }
    </div>
</div>

<!-- Change Email Section -->
<div class="change-email-section">
    @if (isChangingEmail)
    {
        <div class="saving-overlay">
            <div class="spinner"></div>
        </div>
    }

    <div class="section-header">
        <div class="section-icon">
            <i class="fas fa-edit"></i>
        </div>
        <div>
            <h3 class="section-title">Change Email Address</h3>
        </div>
    </div>

    <EditForm Model="Input" FormName="change-email" OnValidSubmit="OnValidSubmitAsync" method="post">
        <DataAnnotationsValidator />
        <ValidationSummary class="text-danger" role="alert" />

        <div class="form-group">
            <div class="form-floating">
                <InputText @bind-Value="Input.NewEmail" class="form-control" autocomplete="email" aria-required="true" placeholder="Enter new email address" @oninput="OnEmailInput" />
                <label for="new-email">New Email Address</label>
                <ValidationMessage For="() => Input.NewEmail" class="validation-message" />
            </div>
            @if (emailValidationState == EmailValidationState.Valid)
            {
                <div class="valid-feedback">Email format looks good!</div>
            }
            else if (emailValidationState == EmailValidationState.SameAsCurrentEmail)
            {
                <div class="validation-message">This is your current email address</div>
            }
        </div>

        <div class="email-help">
            <div class="help-title">
                <i class="fas fa-exclamation-triangle"></i>
                <span>Important Information</span>
            </div>
            <ul style="margin: 0.5rem 0 0 1.5rem; padding: 0;">
                <li>A confirmation email will be sent to your new email address</li>
                <li>You must verify the new email before the change takes effect</li>
                <li>Your current email will remain active until verification is complete</li>
                <li>Update any external services that use your current email address</li>
            </ul>
        </div>

        <div class="submit-section">
            <div class="submit-info">
                <h4><i class="fas fa-envelope-open me-2"></i>Ready to Update Your Email?</h4>
                <p>A confirmation link will be sent to your new email address.</p>
            </div>
            <div class="submit-actions">
                <button type="submit" class="btn btn-primary" disabled="@(isChangingEmail || !IsFormValid())">
                    @if (isChangingEmail)
                    {
                        <i class="fas fa-spinner fa-spin me-2"></i>
                        <span>Sending Confirmation...</span>
                    }
                    else
                    {
                        <i class="fas fa-envelope me-2"></i>
                        <span>Change Email Address</span>
                    }
                </button>
                <a href="Account/Manage" class="btn btn-secondary">
                    <i class="fas fa-arrow-left me-2"></i>
                    Back to Profile
                </a>
            </div>
        </div>
    </EditForm>
</div>

@code {
    private string? message;
    private ApplicationUser user = default!;
    private string? email;
    private bool isEmailConfirmed;
    private bool isSendingVerification = false;
    private bool isChangingEmail = false;
    private EmailValidationState emailValidationState = EmailValidationState.None;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm(FormName = "change-email")]
    private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        email = await UserManager.GetEmailAsync(user);
        isEmailConfirmed = await UserManager.IsEmailConfirmedAsync(user);

        Input.NewEmail ??= email;
    }

    private async Task OnValidSubmitAsync()
    {
        if (Input.NewEmail is null || Input.NewEmail == email)
        {
            message = "Your email is unchanged.";
            return;
        }

        isChangingEmail = true;
        StateHasChanged();

        try
        {
            var userId = await UserManager.GetUserIdAsync(user);
            var code = await UserManager.GenerateChangeEmailTokenAsync(user, Input.NewEmail);
            code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
            var callbackUrl = NavigationManager.GetUriWithQueryParameters(
                NavigationManager.ToAbsoluteUri("Account/ConfirmEmailChange").AbsoluteUri,
                new Dictionary<string, object?> { ["userId"] = userId, ["email"] = Input.NewEmail, ["code"] = code });

            await EmailSender.SendConfirmationLinkAsync(user, Input.NewEmail, HtmlEncoder.Default.Encode(callbackUrl));

            // Simulate a brief delay for better UX
            await Task.Delay(1500);

            message = "Confirmation link to change email sent. Please check your email.";
        }
        finally
        {
            isChangingEmail = false;
            StateHasChanged();
        }
    }

    private async Task OnSendEmailVerificationAsync()
    {
        if (email is null)
        {
            return;
        }

        isSendingVerification = true;
        StateHasChanged();

        try
        {
            var userId = await UserManager.GetUserIdAsync(user);
            var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
            code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
            var callbackUrl = NavigationManager.GetUriWithQueryParameters(
                NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
                new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code });

            await EmailSender.SendConfirmationLinkAsync(user, email, HtmlEncoder.Default.Encode(callbackUrl));

            // Simulate a brief delay for better UX
            await Task.Delay(1500);

            message = "Verification email sent. Please check your email.";
        }
        finally
        {
            isSendingVerification = false;
            StateHasChanged();
        }
    }

    private void OnEmailInput(ChangeEventArgs e)
    {
        var newEmail = e.Value?.ToString()?.Trim() ?? "";

        if (string.IsNullOrEmpty(newEmail))
        {
            emailValidationState = EmailValidationState.None;
        }
        else if (newEmail.Equals(email, StringComparison.OrdinalIgnoreCase))
        {
            emailValidationState = EmailValidationState.SameAsCurrentEmail;
        }
        else if (IsValidEmail(newEmail))
        {
            emailValidationState = EmailValidationState.Valid;
        }
        else
        {
            emailValidationState = EmailValidationState.Invalid;
        }

        StateHasChanged();
    }

    private bool IsValidEmail(string email)
    {
        var emailRegex = new System.Text.RegularExpressions.Regex(@"^[^\s@]+@[^\s@]+\.[^\s@]+$");
        return emailRegex.IsMatch(email);
    }

    private bool IsFormValid() =>
        !string.IsNullOrEmpty(Input.NewEmail) &&
        emailValidationState == EmailValidationState.Valid;

    private enum EmailValidationState
    {
        None,
        Valid,
        Invalid,
        SameAsCurrentEmail
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        [Display(Name = "New email")]
        public string? NewEmail { get; set; }
    }
}