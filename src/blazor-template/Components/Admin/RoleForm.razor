@page "/admin/roles/new"
@page "/admin/roles/edit/{RoleId}"
@using BlazorTemplate.Components.Layout
@using BlazorTemplate.Data
@using Microsoft.AspNetCore.Authorization
@layout AdminLayout
@attribute [Authorize(Roles = "Administrator")]
@rendermode InteractiveServer

<style>
    .role-form-container {
        max-width: 900px;
        margin: 0 auto;
        padding: 0 1rem;
    }

    .breadcrumb-nav {
        margin-bottom: 1.5rem;
    }

    .breadcrumb {
        background: transparent;
        padding: 0;
        margin: 0;
        font-size: 0.875rem;
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .breadcrumb-item a {
        color: var(--color-primary);
        text-decoration: none;
    }

        .breadcrumb-item a:hover {
            text-decoration: underline;
        }

    .breadcrumb-item.active {
        color: var(--color-dark);
        font-weight: 600;
    }

    .breadcrumb-item + .breadcrumb-item::before {
        content: "›";
        color: #6c757d;
        font-size: 1.1rem;
    }

    .form-header {
        background: white;
        border: 1px solid #e9ecef;
        border-radius: 12px;
        padding: 2rem;
        margin-bottom: 2rem;
        display: flex;
        align-items: center;
        gap: 1.5rem;
        box-shadow: 0 2px 4px rgba(0,0,0,0.05);
    }

    .form-icon {
        width: 64px;
        height: 64px;
        border-radius: 12px;
        background: linear-gradient(135deg, var(--color-primary), var(--color-secondary));
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        font-size: 1.5rem;
        flex-shrink: 0;
    }

    .form-info h1 {
        margin: 0 0 0.5rem 0;
        font-size: 1.75rem;
        font-weight: 600;
        color: var(--color-dark);
    }

    .form-info p {
        margin: 0;
        color: #6c757d;
        font-size: 1rem;
        line-height: 1.5;
    }

    .form-actions {
        margin-left: auto;
        display: flex;
        gap: 0.75rem;
    }

    .form-content {
        display: grid;
        grid-template-columns: 2fr 1fr;
        gap: 2rem;
        align-items: start;
    }

    .main-form {
        display: flex;
        flex-direction: column;
        gap: 2rem;
    }

    .sidebar-form {
        display: flex;
        flex-direction: column;
        gap: 2rem;
    }

    .form-section {
        background: white;
        border: 1px solid #e9ecef;
        border-radius: 12px;
        overflow: hidden;
        box-shadow: 0 2px 4px rgba(0,0,0,0.05);
    }

    .section-header {
        background: #f8f9fa;
        padding: 1.25rem 1.5rem;
        border-bottom: 1px solid #e9ecef;
        display: flex;
        align-items: center;
        gap: 0.75rem;
    }

    .section-icon {
        width: 32px;
        height: 32px;
        border-radius: 8px;
        background: linear-gradient(135deg, var(--color-primary), var(--color-secondary));
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        font-size: 0.875rem;
    }

    .section-title {
        font-size: 1.125rem;
        font-weight: 600;
        color: var(--color-dark);
        margin: 0;
    }

    .section-body {
        padding: 1.5rem;
    }

    .form-group {
        margin-bottom: 1.5rem;
    }

        .form-group:last-child {
            margin-bottom: 0;
        }

    .form-label {
        display: block;
        font-weight: 600;
        color: var(--color-dark);
        margin-bottom: 0.5rem;
        font-size: 0.875rem;
    }

        .form-label.required::after {
            content: "*";
            color: var(--color-danger);
            margin-left: 0.25rem;
        }

    .form-control {
        width: 100%;
        padding: 0.75rem 1rem;
        border: 1px solid #dee2e6;
        border-radius: 8px;
        font-size: 0.875rem;
        transition: border-color 0.2s ease, box-shadow 0.2s ease;
        background: white;
    }

        .form-control:focus {
            border-color: var(--color-primary);
            outline: none;
            box-shadow: 0 0 0 3px rgba(120, 39, 137, 0.1);
        }

        .form-control.is-invalid {
            border-color: var(--color-danger);
        }

            .form-control.is-invalid:focus {
                box-shadow: 0 0 0 3px rgba(220, 53, 69, 0.25);
            }

    .form-help {
        font-size: 0.75rem;
        color: #6c757d;
        margin-top: 0.375rem;
        line-height: 1.4;
    }

    .form-error {
        font-size: 0.75rem;
        color: var(--color-danger);
        margin-top: 0.375rem;
        line-height: 1.4;
    }

    .role-type-selector {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 1rem;
        margin-bottom: 1rem;
    }

    .role-type-option {
        padding: 1rem;
        border: 2px solid #e9ecef;
        border-radius: 8px;
        cursor: pointer;
        transition: all 0.3s ease;
        background: white;
        text-align: center;
    }

        .role-type-option:hover {
            border-color: var(--color-primary);
        }

        .role-type-option.selected {
            border-color: var(--color-primary);
            background: rgba(120, 39, 137, 0.05);
        }

    .role-type-icon {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        background: #f8f9fa;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 1.125rem;
        color: var(--color-primary);
        margin: 0 auto 0.75rem auto;
        transition: all 0.3s ease;
    }

    .role-type-option.selected .role-type-icon {
        background: var(--color-primary);
        color: white;
    }

    .role-type-title {
        font-weight: 600;
        color: var(--color-dark);
        margin: 0 0 0.25rem 0;
        font-size: 0.875rem;
    }

    .role-type-desc {
        color: #6c757d;
        font-size: 0.75rem;
        margin: 0;
    }

    .permissions-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
        gap: 1.5rem;
    }

    .permission-category {
        border: 1px solid #e9ecef;
        border-radius: 8px;
        overflow: hidden;
    }

    .category-header {
        background: #f8f9fa;
        padding: 0.75rem 1rem;
        border-bottom: 1px solid #e9ecef;
        display: flex;
        align-items: center;
        justify-content: space-between;
    }

    .category-title {
        font-weight: 600;
        color: var(--color-dark);
        font-size: 0.875rem;
        margin: 0;
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .category-icon {
        width: 20px;
        height: 20px;
        border-radius: 4px;
        background: var(--color-primary);
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        font-size: 0.75rem;
    }

    .select-all-toggle {
        font-size: 0.75rem;
        color: var(--color-primary);
        cursor: pointer;
        font-weight: 600;
    }

        .select-all-toggle:hover {
            text-decoration: underline;
        }

    .permission-list {
        padding: 0.75rem;
    }

    .permission-item {
        display: flex;
        align-items: center;
        justify-content: space-between;
        padding: 0.5rem 0;
        border-bottom: 1px solid #f1f3f4;
    }

        .permission-item:last-child {
            border-bottom: none;
        }

    .permission-info {
        flex: 1;
    }

    .permission-name {
        font-weight: 600;
        color: var(--color-dark);
        font-size: 0.8rem;
        margin: 0 0 0.25rem 0;
    }

    .permission-desc {
        color: #6c757d;
        font-size: 0.7rem;
        margin: 0;
        line-height: 1.3;
    }

    .permission-toggle {
        width: 40px;
        height: 20px;
        background: #dee2e6;
        border-radius: 10px;
        position: relative;
        cursor: pointer;
        transition: all 0.3s ease;
        border: none;
        outline: none;
        flex-shrink: 0;
    }

        .permission-toggle.active {
            background: var(--color-success);
        }

        .permission-toggle::after {
            content: '';
            position: absolute;
            top: 2px;
            left: 2px;
            width: 16px;
            height: 16px;
            background: white;
            border-radius: 50%;
            transition: all 0.3s ease;
            box-shadow: 0 1px 3px rgba(0,0,0,0.2);
        }

        .permission-toggle.active::after {
            transform: translateX(20px);
        }

    .role-preview {
        background: #f8f9fa;
        border: 1px solid #e9ecef;
        border-radius: 8px;
        padding: 1rem;
    }

    .preview-title {
        font-weight: 600;
        color: var(--color-dark);
        font-size: 0.875rem;
        margin: 0 0 0.75rem 0;
    }

    .preview-role {
        display: flex;
        align-items: center;
        gap: 0.75rem;
        margin-bottom: 0.75rem;
    }

    .preview-icon {
        width: 32px;
        height: 32px;
        border-radius: 6px;
        background: linear-gradient(135deg, var(--color-primary), var(--color-secondary));
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        font-size: 0.875rem;
    }

    .preview-details h6 {
        margin: 0 0 0.25rem 0;
        font-weight: 600;
        color: var(--color-dark);
        font-size: 0.875rem;
    }

    .preview-details small {
        color: #6c757d;
        font-size: 0.75rem;
    }

    .preview-permissions {
        margin-top: 0.75rem;
    }

        .preview-permissions h6 {
            font-size: 0.75rem;
            font-weight: 600;
            color: var(--color-dark);
            margin: 0 0 0.5rem 0;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

    .permission-tags {
        display: flex;
        flex-wrap: wrap;
        gap: 0.25rem;
    }

    .permission-tag {
        padding: 0.125rem 0.5rem;
        background: #e9ecef;
        border: 1px solid #dee2e6;
        border-radius: 4px;
        font-size: 0.65rem;
        color: #6c757d;
        font-weight: 600;
    }

    /* Responsive Design */
    @@media (max-width: 768px) {
        .role-form-container {
            padding: 0 0.5rem;
        }

        .form-header {
            flex-direction: column;
            text-align: center;
            gap: 1rem;
        }

        .form-actions {
            margin-left: 0;
            width: 100%;
            justify-content: center;
        }

        .form-content {
            grid-template-columns: 1fr;
        }

        .sidebar-form {
            order: -1;
        }

        .role-type-selector {
            grid-template-columns: 1fr;
        }

        .permissions-grid {
            grid-template-columns: 1fr;
        }

        .section-body {
            padding: 1rem;
        }
    }
</style>

<div class="role-form-container">
    <!-- Breadcrumb -->
    <nav class="breadcrumb-nav">
        <ol class="breadcrumb">
            <li class="breadcrumb-item"><a href="/admin">Admin</a></li>
            <li class="breadcrumb-item"><a href="/admin/roles">Roles</a></li>
            <li class="breadcrumb-item active">@(IsEditMode ? "Edit Role" : "Create Role")</li>
        </ol>
    </nav>

    <!-- Form Header -->
    <div class="form-header">
        <div class="form-icon">
            <i class="fas fa-user-shield"></i>
        </div>
        <div class="form-info">
            <h1>@GetFormTitle()</h1>
            <p>@GetFormDescription()</p>
        </div>
        <div class="form-actions">
            <button type="button" class="btn btn-outline-secondary" @onclick="Cancel">Cancel</button>
            <button type="button" class="btn btn-primary" @onclick="SaveRole" disabled="@(isSaving || isLoading)">
                @if (isSaving)
                {
                    <span class="spinner-border spinner-border-sm me-1" role="status" aria-hidden="true"></span>
                }
                else
                {
                    <i class="fas fa-save me-1"></i>
                }
                @(IsEditMode ? "Update Role" : "Create Role")
            </button>
        </div>
    </div>

    <!-- Form Content -->
    <div class="form-content">
        <!-- Main Form -->
        <div class="main-form">
            <!-- Basic Information -->
            <div class="form-section">
                <div class="section-header">
                    <div class="section-icon">
                        <i class="fas fa-info-circle"></i>
                    </div>
                    <h3 class="section-title">Basic Information</h3>
                </div>
                <div class="section-body">
                    <div class="form-group">
                        <label class="form-label required">Role Name</label>
                        <input type="text" class="form-control @(HasValidationError("Name") ? "is-invalid" : "")"
                               placeholder="Enter role name (e.g., Content Manager)"
                               @bind="@uiRoleName"
                               @oninput="@OnRoleNameChanged" />
                        @if (HasValidationError("Name"))
                        {
                            <div class="form-error">@GetValidationError("Name")</div>
                        }
                        else
                        {
                            <div class="form-help">Choose a descriptive name that clearly identifies the role's purpose.</div>
                        }
                    </div>

                    <div class="form-group">
                        <label class="form-label">Description</label>
                        <textarea class="form-control" rows="3" placeholder="Describe the role's responsibilities and access level..."
                                  @bind="@uiRoleDescription"></textarea>
                        <div class="form-help">Provide a brief description of what this role can do and its intended use.</div>
                    </div>

                    <div class="form-group">
                        <label class="form-label">Role Type</label>
                        <div class="role-type-selector">
                            <div class="role-type-option selected">
                                <div class="role-type-icon">
                                    <i class="fas fa-user-plus"></i>
                                </div>
                                <h4 class="role-type-title">Custom Role</h4>
                                <p class="role-type-desc">Create a role with specific permissions</p>
                            </div>
                            <div class="role-type-option">
                                <div class="role-type-icon">
                                    <i class="fas fa-clone"></i>
                                </div>
                                <h4 class="role-type-title">Clone Existing</h4>
                                <p class="role-type-desc">Copy permissions from existing role</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Permissions -->
            <div class="form-section">
                <div class="section-header">
                    <div class="section-icon">
                        <i class="fas fa-key"></i>
                    </div>
                    <h3 class="section-title">Permissions</h3>
                </div>
                <div class="section-body">
                    @if (isLoading)
                    {
                        <div style="text-align: center; padding: 2rem;">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                            <p class="mt-2">Loading permissions...</p>
                        </div>
                    }
                    else
                    {
                        <div class="permissions-grid">
                            @foreach (var category in availablePermissions.GroupBy(p => p.Category))
                            {
                                <div class="permission-category">
                                    <div class="category-header">
                                        <h4 class="category-title">
                                            <div class="category-icon">
                                                <i class="@(category.First().Icon)"></i>
                                            </div>
                                            @category.Key
                                        </h4>
                                        <span class="select-all-toggle" @onclick="() => ToggleAllPermissions(category.Key)">
                                            Select All
                                        </span>
                                    </div>
                                    <div class="permission-list">
                                        @foreach (var permission in category)
                                        {
                                            var isSelected = selectedPermissions.ContainsKey(permission.Name) && selectedPermissions[permission.Name];
                                            <div class="permission-item">
                                                <div class="permission-info">
                                                    <h6 class="permission-name">@permission.DisplayName</h6>
                                                    <p class="permission-desc">@permission.Description</p>
                                                </div>
                                                <button type="button"
                                                        class="permission-toggle @(isSelected ? "active" : "")"
                                                        @onclick="() => TogglePermission(permission.Name)">
                                                </button>
                                            </div>
                                        }
                                    </div>
                                </div>
                            }
                        </div>
                    }
                </div>
            </div>
        </div>

        <!-- Sidebar -->
        <div class="sidebar-form">
            <!-- Role Preview -->
            <div class="form-section">
                <div class="section-header">
                    <div class="section-icon">
                        <i class="fas fa-eye"></i>
                    </div>
                    <h3 class="section-title">Preview</h3>
                </div>
                <div class="section-body">
                    <div class="role-preview">
                        <h4 class="preview-title">Role Preview</h4>
                        <div class="preview-role">
                            <div class="preview-icon">
                                <i class="fas fa-user-plus"></i>
                            </div>
                            <div class="preview-details">
                                <h6>@(string.IsNullOrEmpty(IsEditMode ? updateRequest.Name : createRequest.Name) ? "New Role" : (IsEditMode ? updateRequest.Name : createRequest.Name))</h6>
                                <small>Custom Role</small>
                            </div>
                        </div>
                        <div class="preview-permissions">
                            <h6>Selected Permissions (@GetSelectedPermissionCount())</h6>
                            <div class="permission-tags">
                                @foreach (var permission in selectedPermissions.Where(p => p.Value).Take(5))
                                {
                                    var permissionDetails = availablePermissions.FirstOrDefault(p => p.Name == permission.Key);
                                    <span class="permission-tag">@(permissionDetails?.DisplayName ?? permission.Key)</span>
                                }
                                @if (GetSelectedPermissionCount() > 5)
                                {
                                    <span class="permission-tag">+@(GetSelectedPermissionCount() - 5) more</span>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Role Settings -->
            <div class="form-section">
                <div class="section-header">
                    <div class="section-icon">
                        <i class="fas fa-sliders-h"></i>
                    </div>
                    <h3 class="section-title">Settings</h3>
                </div>
                <div class="section-body">
                    <div class="form-group">
                        <label class="form-label">Status</label>
                        <select class="form-control">
                            <option selected>Active</option>
                            <option>Inactive</option>
                        </select>
                        <div class="form-help">Inactive roles cannot be assigned to users.</div>
                    </div>

                    <div class="form-group">
                        <label class="form-label">Priority Level</label>
                        <select class="form-control">
                            <option>Low</option>
                            <option selected>Normal</option>
                            <option>High</option>
                            <option>Critical</option>
                        </select>
                        <div class="form-help">Higher priority roles take precedence in permission conflicts.</div>
                    </div>

                    <div class="form-group">
                        <div class="form-check">
                            <input type="checkbox" id="autoAssign" class="form-check-input" />
                            <label for="autoAssign" class="form-check-label">
                                Auto-assign to new users
                            </label>
                        </div>
                        <div class="form-help">Automatically assign this role to newly registered users.</div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@using BlazorTemplate.Services
@using BlazorTemplate.Models
@inject IAdminRoleService AdminRoleService
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation

@code {
    [Parameter] public string? RoleId { get; set; }

    private bool IsEditMode => !string.IsNullOrEmpty(RoleId);
    private string uiRoleName
    {
        get
        {
            return (IsEditMode ? updateRequest.Name : createRequest.Name);
        }
        set
        {
            if (IsEditMode)
            {
                updateRequest.Name = value;
            }
            else
            {
                createRequest.Name = value;
            }
        }
    }
    private string uiRoleDescription
    {
        get
        {
            return (IsEditMode ? updateRequest.Description : createRequest.Description);
        }
        set
        {
            if (IsEditMode)
            {
                updateRequest.Description = value;
            }
            else
            {
                createRequest.Description = value;
            }
        }
    }
    private bool isLoading = true;
    private bool isSaving = false;

    private CreateRoleRequest createRequest = new();
    private UpdateRoleRequest updateRequest = new();
    private RoleDetailDto? existingRole;
    private List<PermissionDto> availablePermissions = new();
    private Dictionary<string, bool> selectedPermissions = new();
    private Dictionary<string, string> validationErrors = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        isLoading = true;
        try
        {
            availablePermissions = await AdminRoleService.GetAvailablePermissionsAsync();

            if (IsEditMode)
            {
                existingRole = await AdminRoleService.GetRoleByIdAsync(RoleId!);
                updateRequest.Name = existingRole.Name;
                updateRequest.Description = existingRole.Description;
                updateRequest.Permissions = existingRole.Permissions.ToList();

                // Set selected permissions
                foreach (var permission in availablePermissions)
                {
                    selectedPermissions[permission.Name] = existingRole.Permissions.Contains(permission.Name);
                }
            }
            else
            {
                // Initialize empty permissions
                foreach (var permission in availablePermissions)
                {
                    selectedPermissions[permission.Name] = false;
                }
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error loading data: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task SaveRole()
    {
        if (isSaving) return;

        // Validate form
        if (!ValidateForm())
        {
            StateHasChanged();
            return;
        }

        isSaving = true;
        try
        {
            var selectedPermissionNames = selectedPermissions
                .Where(p => p.Value)
                .Select(p => p.Key)
                .ToList();

            Microsoft.AspNetCore.Identity.IdentityResult result;

            if (IsEditMode)
            {
                updateRequest.Permissions = selectedPermissionNames;
                result = await AdminRoleService.UpdateRoleAsync(RoleId!, updateRequest);
            }
            else
            {
                createRequest.Permissions = selectedPermissionNames;
                result = await AdminRoleService.CreateRoleAsync(createRequest);
            }

            if (result.Succeeded)
            {
                await JSRuntime.InvokeVoidAsync("alert",
                    $"Role '{(IsEditMode ? updateRequest.Name : createRequest.Name)}' {(IsEditMode ? "updated" : "created")} successfully!");
                Navigation.NavigateTo("/admin/roles");
            }
            else
            {
                var errors = string.Join(", ", result.Errors.Select(e => e.Description));
                await JSRuntime.InvokeVoidAsync("alert", $"Error saving role: {errors}");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error saving role: {ex.Message}");
        }
        finally
        {
            isSaving = false;
        }
    }

    private void TogglePermission(string permissionName)
    {
        selectedPermissions[permissionName] = !selectedPermissions[permissionName];
        StateHasChanged();
    }

    private void ToggleAllPermissions(string category)
    {
        var categoryPermissions = availablePermissions
            .Where(p => p.Category == category)
            .Select(p => p.Name);

        var allSelected = categoryPermissions.All(p => selectedPermissions[p]);

        foreach (var permission in categoryPermissions)
        {
            selectedPermissions[permission] = !allSelected;
        }

        StateHasChanged();
    }

    private int GetSelectedPermissionCount()
    {
        return selectedPermissions.Count(p => p.Value);
    }

    private string GetFormTitle()
    {
        return IsEditMode ? $"Edit Role: {existingRole?.Name}" : "Create New Role";
    }

    private string GetFormDescription()
    {
        return IsEditMode
            ? "Modify role settings, permissions, and user assignments."
            : "Define a new role with specific permissions and access levels for your application.";
    }

    private void Cancel()
    {
        Navigation.NavigateTo("/admin/roles");
    }

    private bool ValidateForm()
    {
        validationErrors.Clear();
        var roleName = IsEditMode ? updateRequest.Name : createRequest.Name;

        // Validate role name
        if (string.IsNullOrWhiteSpace(roleName))
        {
            validationErrors["Name"] = "Role name is required.";
        }
        else if (roleName.Length < 2 || roleName.Length > 50)
        {
            validationErrors["Name"] = "Role name must be between 2 and 50 characters.";
        }
        else if (!System.Text.RegularExpressions.Regex.IsMatch(roleName, @"^[a-zA-Z0-9\s\-_]+$"))
        {
            validationErrors["Name"] = "Role name contains invalid characters. Only letters, numbers, spaces, hyphens, and underscores are allowed.";
        }

        return !validationErrors.Any();
    }

    private bool HasValidationError(string field)
    {
        return validationErrors.ContainsKey(field);
    }

    private string GetValidationError(string field)
    {
        return validationErrors.GetValueOrDefault(field, "");
    }

    private async Task OnRoleNameChanged(ChangeEventArgs e)
    {
        var newValue = e.Value?.ToString() ?? "";
        if (IsEditMode)
        {
            updateRequest.Name = newValue;
        }
        else
        {
            createRequest.Name = newValue;
        }

        // Clear validation error for this field if it exists
        if (validationErrors.ContainsKey("Name"))
        {
            validationErrors.Remove("Name");
        }

        StateHasChanged();
    }
}