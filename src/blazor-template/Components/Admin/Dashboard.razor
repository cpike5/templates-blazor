@page "/admin"
@using BlazorTemplate.Components.Layout
@using BlazorTemplate.Data
@using BlazorTemplate.Services.Monitoring
@using BlazorTemplate.Services.Auth
@using BlazorTemplate.Models
@using BlazorTemplate.Models.Dashboard
@using Microsoft.AspNetCore.Authorization
@layout AdminLayout
@attribute [Authorize(Roles = "Administrator")]
@inject IDashboardService DashboardService
@inject IAdminRoleService AdminRoleService
@inject ILogger<Dashboard> Logger
@rendermode InteractiveServer

<style>
    .admin-dashboard {
        max-width: 1400px;
        margin: 0 auto;
        padding: 0 1rem;
    }

    .welcome-banner {
        background: linear-gradient(135deg, var(--color-primary), var(--color-secondary));
        color: white;
        border-radius: 16px;
        padding: 2.5rem;
        margin-bottom: 2rem;
        position: relative;
        overflow: hidden;
    }

    .welcome-banner::before {
        content: '';
        position: absolute;
        top: 0;
        right: 0;
        width: 200px;
        height: 200px;
        background: rgba(255, 255, 255, 0.1);
        border-radius: 50%;
        transform: translate(50px, -50px);
    }

    .welcome-content {
        position: relative;
        z-index: 1;
    }

    .welcome-content h1 {
        font-size: 2.25rem;
        font-weight: 700;
        margin: 0 0 0.75rem 0;
        text-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }

    .welcome-content p {
        font-size: 1.1rem;
        opacity: 0.9;
        margin: 0;
        line-height: 1.5;
    }

    .stats-overview {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(240px, 1fr));
        gap: 1.5rem;
        margin-bottom: 2rem;
    }

    .stat-card {
        background: white;
        border: 1px solid #e9ecef;
        border-radius: 12px;
        padding: 1.75rem;
        transition: all 0.3s ease;
        position: relative;
        overflow: hidden;
    }

    .stat-card:hover {
        transform: translateY(-2px);
        box-shadow: 0 8px 25px rgba(0, 0, 0, 0.1);
    }

    .stat-card::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        width: 4px;
        height: 100%;
        background: var(--color-primary);
    }

    .stat-header {
        display: flex;
        align-items: center;
        justify-content: space-between;
        margin-bottom: 1rem;
    }

    .stat-icon {
        width: 48px;
        height: 48px;
        border-radius: 12px;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 1.5rem;
        color: white;
    }

    .stat-icon.users { background: linear-gradient(135deg, #17a2b8, #138496); }
    .stat-icon.roles { background: linear-gradient(135deg, #ffc107, #e0a800); }
    .stat-icon.activity { background: linear-gradient(135deg, #28a745, #1e7e34); }
    .stat-icon.security { background: linear-gradient(135deg, #dc3545, #c82333); }

    .stat-trend {
        display: flex;
        align-items: center;
        gap: 0.25rem;
        font-size: 0.75rem;
        font-weight: 600;
        text-transform: uppercase;
        letter-spacing: 0.5px;
    }

    .stat-trend.up { color: var(--color-success); }
    .stat-trend.down { color: var(--color-danger); }
    .stat-trend.neutral { color: #6c757d; }

    .stat-value {
        font-size: 2.25rem;
        font-weight: 700;
        color: var(--color-dark);
        margin-bottom: 0.5rem;
        line-height: 1;
    }

    .stat-label {
        color: #6c757d;
        font-size: 0.875rem;
        font-weight: 500;
        margin: 0;
    }

    .dashboard-content {
        display: grid;
        grid-template-columns: 2fr 1fr;
        gap: 2rem;
        align-items: start;
    }

    .main-panels {
        display: flex;
        flex-direction: column;
        gap: 2rem;
    }

    .sidebar-panels {
        display: flex;
        flex-direction: column;
        gap: 2rem;
    }

    .panel {
        background: white;
        border: 1px solid #e9ecef;
        border-radius: 12px;
        overflow: hidden;
        box-shadow: 0 2px 4px rgba(0,0,0,0.05);
    }

    .panel-header {
        background: #f8f9fa;
        padding: 1.25rem 1.5rem;
        border-bottom: 1px solid #e9ecef;
        display: flex;
        align-items: center;
        justify-content: space-between;
    }

    .panel-title {
        font-size: 1.125rem;
        font-weight: 600;
        color: var(--color-dark);
        margin: 0;
        display: flex;
        align-items: center;
        gap: 0.75rem;
    }

    .panel-icon {
        width: 32px;
        height: 32px;
        border-radius: 8px;
        background: linear-gradient(135deg, var(--color-primary), var(--color-secondary));
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        font-size: 0.875rem;
    }

    .panel-body {
        padding: 1.5rem;
    }

    .quick-actions {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(180px, 1fr));
        gap: 1rem;
    }

    .quick-action {
        display: flex;
        flex-direction: column;
        align-items: center;
        padding: 1.5rem 1rem;
        border: 2px solid #e9ecef;
        border-radius: 12px;
        text-decoration: none;
        color: var(--color-dark);
        transition: all 0.3s ease;
        background: white;
    }

    .quick-action:hover {
        border-color: var(--color-primary);
        transform: translateY(-2px);
        box-shadow: 0 4px 12px rgba(120, 39, 137, 0.15);
        color: var(--color-primary);
        text-decoration: none;
    }

    .quick-action-icon {
        width: 48px;
        height: 48px;
        border-radius: 50%;
        background: #f8f9fa;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 1.25rem;
        color: var(--color-primary);
        margin-bottom: 0.75rem;
        transition: all 0.3s ease;
    }

    .quick-action:hover .quick-action-icon {
        background: var(--color-primary);
        color: white;
    }

    .quick-action-title {
        font-weight: 600;
        font-size: 0.875rem;
        text-align: center;
        margin: 0;
    }

    .activity-feed {
        display: flex;
        flex-direction: column;
        gap: 1rem;
        max-height: 400px;
        overflow-y: auto;
    }

    .activity-item {
        display: flex;
        align-items: center;
        gap: 1rem;
        padding: 0.75rem 0;
        border-bottom: 1px solid #f1f3f4;
    }

    .activity-item:last-child {
        border-bottom: none;
    }

    .activity-avatar {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        background: linear-gradient(135deg, var(--color-primary), var(--color-secondary));
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        font-weight: 600;
        font-size: 0.875rem;
        flex-shrink: 0;
    }

    .activity-content {
        flex: 1;
        min-width: 0;
    }

    .activity-content h6 {
        margin: 0 0 0.25rem 0;
        font-weight: 600;
        color: var(--color-dark);
        font-size: 0.875rem;
    }

    .activity-content small {
        color: #6c757d;
        font-size: 0.75rem;
        line-height: 1.3;
    }

    .activity-time {
        color: #6c757d;
        font-size: 0.75rem;
        flex-shrink: 0;
    }

    .system-status {
        display: flex;
        flex-direction: column;
        gap: 1rem;
    }

    .status-item {
        display: flex;
        align-items: center;
        justify-content: space-between;
        padding: 1rem;
        border: 1px solid #e9ecef;
        border-radius: 8px;
        background: white;
    }

    .status-info {
        display: flex;
        align-items: center;
        gap: 0.75rem;
    }

    .status-icon {
        width: 32px;
        height: 32px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 0.875rem;
    }

    .status-icon.healthy {
        background: #d4edda;
        color: #155724;
    }

    .status-icon.warning {
        background: #fff3cd;
        color: #856404;
    }

    .status-icon.error {
        background: #f8d7da;
        color: #721c24;
    }

    .status-details h6 {
        margin: 0 0 0.25rem 0;
        font-weight: 600;
        color: var(--color-dark);
        font-size: 0.875rem;
    }

    .status-details small {
        color: #6c757d;
        font-size: 0.75rem;
    }

    .status-badge {
        padding: 0.25rem 0.75rem;
        border-radius: 12px;
        font-size: 0.75rem;
        font-weight: 600;
        text-transform: uppercase;
        letter-spacing: 0.5px;
    }

    .status-badge.healthy {
        background: #d4edda;
        color: #155724;
    }

    .status-badge.warning {
        background: #fff3cd;
        color: #856404;
    }

    .status-badge.error {
        background: #f8d7da;
        color: #721c24;
    }

    /* Responsive Design */
    @@media (max-width: 1200px) {
        .dashboard-content {
            grid-template-columns: 1fr;
        }

        .sidebar-panels {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 2rem;
        }
    }

    @@media (max-width: 768px) {
        .admin-dashboard {
            padding: 0 0.5rem;
        }

        .welcome-banner {
            padding: 2rem 1.5rem;
        }

        .welcome-content h1 {
            font-size: 1.75rem;
        }

        .stats-overview {
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 1rem;
        }

        .stat-card {
            padding: 1.25rem;
        }

        .stat-value {
            font-size: 1.75rem;
        }

        .quick-actions {
            grid-template-columns: repeat(auto-fit, minmax(140px, 1fr));
        }

        .panel-body {
            padding: 1rem;
        }

        .sidebar-panels {
            grid-template-columns: 1fr;
        }
    }
</style>

<!-- Welcome Banner -->
<div class="admin-dashboard">
    <div class="welcome-banner">
        <div class="welcome-content">
            <h1>Welcome to Admin Dashboard</h1>
            <p>Manage users, roles, and system settings from this central control panel. Monitor system health and recent activity at a glance.</p>
        </div>
    </div>

    <!-- Statistics Overview -->
    @if (isLoading)
    {
        <div class="text-center py-4">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <p class="mt-2 text-muted">Loading dashboard data...</p>
        </div>
    }
    else if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger d-flex align-items-center" role="alert">
            <i class="fas fa-exclamation-triangle me-2"></i>
            @errorMessage
            <button class="btn btn-outline-danger btn-sm ms-auto" @onclick="RefreshDataAsync">
                <i class="fas fa-refresh"></i> Retry
            </button>
        </div>
    }
    else if (statistics != null)
    {
        <div class="stats-overview">
            <div class="stat-card">
                <div class="stat-header">
                    <div class="stat-icon users">
                        <i class="fas fa-users"></i>
                    </div>
                    <div class="stat-trend @GetTrendClass(statistics.TotalUsers, 0)">
                        <i class="@GetTrendIcon(statistics.TotalUsers, 0)"></i>
                        @* TODO: Calculate actual trend percentage *@
                        +12%
                    </div>
                </div>
                <div class="stat-value">@statistics.TotalUsers</div>
                <p class="stat-label">Total Users</p>
            </div>

            <div class="stat-card">
                <div class="stat-header">
                    <div class="stat-icon roles">
                        <i class="fas fa-user-shield"></i>
                    </div>
                    <div class="stat-trend neutral">
                        <i class="fas fa-minus"></i>
                        @if (roleStats != null)
                        {
                            <text>@roleStats.CustomRoles custom</text>
                        }
                        else
                        {
                            <text>0%</text>
                        }
                    </div>
                </div>
                <div class="stat-value">
                    @if (roleStats != null)
                    {
                        @roleStats.TotalRoles
                    }
                    else
                    {
                        @statistics.TotalRoles
                    }
                </div>
                <p class="stat-label">Total Roles</p>
            </div>

            <div class="stat-card">
                <div class="stat-header">
                    <div class="stat-icon activity">
                        <i class="fas fa-chart-line"></i>
                    </div>
                    <div class="stat-trend @GetTrendClass(statistics.TodaysSessions, 0)">
                        <i class="@GetTrendIcon(statistics.TodaysSessions, 0)"></i>
                        +8%
                    </div>
                </div>
                <div class="stat-value">@statistics.TodaysSessions</div>
                <p class="stat-label">Today's Sessions</p>
            </div>

            <div class="stat-card">
                <div class="stat-header">
                    <div class="stat-icon security">
                        <i class="fas fa-shield-alt"></i>
                    </div>
                    <div class="stat-trend @GetTrendClass(0, statistics.SecurityAlerts)">
                        <i class="@GetTrendIcon(0, statistics.SecurityAlerts)"></i>
                        @if (statistics.SecurityAlerts > 0) { <text>-@statistics.SecurityAlerts</text> } else { <text>0</text> }
                    </div>
                </div>
                <div class="stat-value">@statistics.SecurityAlerts</div>
                <p class="stat-label">Security Alerts</p>
            </div>
        </div>
    }

    <!-- Dashboard Content -->
    <div class="dashboard-content">
        <!-- Main Panels -->
        <div class="main-panels">
            <!-- Quick Actions -->
            <div class="panel">
                <div class="panel-header">
                    <h3 class="panel-title">
                        <div class="panel-icon">
                            <i class="fas fa-bolt"></i>
                        </div>
                        Quick Actions
                    </h3>
                </div>
                <div class="panel-body">
                    <div class="quick-actions">
                        <a href="/admin/users" class="quick-action">
                            <div class="quick-action-icon">
                                <i class="fas fa-users"></i>
                            </div>
                            <h4 class="quick-action-title">Manage Users</h4>
                        </a>
                        <a href="/admin/roles" class="quick-action">
                            <div class="quick-action-icon">
                                <i class="fas fa-user-shield"></i>
                            </div>
                            <h4 class="quick-action-title">Manage Roles</h4>
                        </a>
                        <a href="/admin/settings" class="quick-action">
                            <div class="quick-action-icon">
                                <i class="fas fa-cog"></i>
                            </div>
                            <h4 class="quick-action-title">System Settings</h4>
                        </a>
                        <button class="quick-action" onclick="alert('Create User functionality')">
                            <div class="quick-action-icon">
                                <i class="fas fa-user-plus"></i>
                            </div>
                            <h4 class="quick-action-title">Add New User</h4>
                        </button>
                        <button class="quick-action" onclick="alert('Create Role functionality')">
                            <div class="quick-action-icon">
                                <i class="fas fa-plus-circle"></i>
                            </div>
                            <h4 class="quick-action-title">Create Role</h4>
                        </button>
                        <button class="quick-action" onclick="alert('Export Data functionality')">
                            <div class="quick-action-icon">
                                <i class="fas fa-download"></i>
                            </div>
                            <h4 class="quick-action-title">Export Data</h4>
                        </button>
                    </div>
                </div>
            </div>

            <!-- Role Analytics -->
            @if (roleStats != null)
            {
                <div class="panel">
                    <div class="panel-header">
                        <h3 class="panel-title">
                            <div class="panel-icon">
                                <i class="fas fa-chart-pie"></i>
                            </div>
                            Role Distribution
                        </h3>
                        <a href="/admin/roles" class="btn btn-outline-primary btn-sm">Manage Roles</a>
                    </div>
                    <div class="panel-body">
                        <div class="stats-row">
                            <div class="stat-item">
                                <div class="stat-value" style="color: #ffc107;">@roleStats.SystemRoles</div>
                                <div class="stat-label">System Roles</div>
                            </div>
                            <div class="stat-item">
                                <div class="stat-value" style="color: #17a2b8;">@roleStats.CustomRoles</div>
                                <div class="stat-label">Custom Roles</div>
                            </div>
                            <div class="stat-item">
                                <div class="stat-value" style="color: #28a745;">@roleStats.TotalAssignments</div>
                                <div class="stat-label">Total Assignments</div>
                            </div>
                        </div>
                        <div class="mt-3">
                            <div class="d-flex justify-content-between align-items-center mb-2">
                                <small class="text-muted">Role Assignment Rate</small>
                                <small class="text-muted">
                                    @if (statistics != null && roleStats.TotalAssignments > 0)
                                    {
                                        @Math.Round((double)roleStats.TotalAssignments / statistics.TotalUsers * 100, 1)<text>%</text>
                                    }
                                    else
                                    {
                                        <text>0%</text>
                                    }
                                </small>
                            </div>
                            <div class="progress" style="height: 6px;">
                                <div class="progress-bar bg-primary" 
                                     style="width: @(statistics != null && roleStats.TotalAssignments > 0 ? Math.Min((double)roleStats.TotalAssignments / statistics.TotalUsers * 100, 100) : 0)%">
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }

            <!-- Recent Activity -->
            <div class="panel">
                <div class="panel-header">
                    <h3 class="panel-title">
                        <div class="panel-icon">
                            <i class="fas fa-history"></i>
                        </div>
                        Recent Activity
                    </h3>
                    <a href="/admin/logs" class="btn btn-outline-primary btn-sm">View All</a>
                </div>
                <div class="panel-body">
                    @if (isLoading)
                    {
                        <div class="text-center py-4">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                            <p class="mt-2 text-muted">Loading activities...</p>
                        </div>
                    }
                    else if (recentActivities?.Any() == true)
                    {
                        <div class="activity-feed">
                            @foreach (var activity in recentActivities)
                            {
                                <div class="activity-item">
                                    <div class="activity-avatar">@activity.InitialsAvatar</div>
                                    <div class="activity-content">
                                        <h6>@activity.Action</h6>
                                        <small>
                                            @activity.DisplayName
                                            @if (!string.IsNullOrEmpty(activity.Details))
                                            {
                                                <text> - @activity.Details</text>
                                            }
                                            @if (!string.IsNullOrEmpty(activity.IpAddress))
                                            {
                                                <text> from @activity.IpAddress</text>
                                            }
                                        </small>
                                    </div>
                                    <div class="activity-time">@activity.TimeAgo</div>
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        <div class="text-center py-4 text-muted">
                            <i class="fas fa-history fa-2x mb-2"></i>
                            <p>No recent activities found</p>
                        </div>
                    }
                </div>
            </div>
        </div>

        <!-- Sidebar Panels -->
        <div class="sidebar-panels">
            <!-- System Status -->
            <div class="panel">
                <div class="panel-header">
                    <h3 class="panel-title">
                        <div class="panel-icon">
                            <i class="fas fa-server"></i>
                        </div>
                        System Status
                    </h3>
                </div>
                <div class="panel-body">
                    @if (isLoading)
                    {
                        <div class="text-center py-4">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                            <p class="mt-2 text-muted">Checking system status...</p>
                        </div>
                    }
                    else if (systemStatus?.Any() == true)
                    {
                        <div class="system-status">
                            @foreach (var item in systemStatus)
                            {
                                <div class="status-item">
                                    <div class="status-info">
                                        <div class="status-icon @GetStatusCssClass(item.Status)">
                                            <i class="@item.Icon"></i>
                                        </div>
                                        <div class="status-details">
                                            <h6>@item.Name</h6>
                                            <small>@item.Description</small>
                                        </div>
                                    </div>
                                    <span class="status-badge @GetStatusCssClass(item.Status)">@GetStatusDisplayText(item.Status)</span>
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        <div class="text-center py-4 text-muted">
                            <i class="fas fa-server fa-2x mb-2"></i>
                            <p>Unable to load system status</p>
                        </div>
                    }
                </div>
            </div>

            <!-- System Health -->
            <div class="panel">
                <div class="panel-header">
                    <h3 class="panel-title">
                        <div class="panel-icon">
                            <i class="fas fa-heartbeat"></i>
                        </div>
                        Health Metrics
                    </h3>
                </div>
                <div class="panel-body">
                    @if (isLoading)
                    {
                        <div class="text-center py-4">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                            <p class="mt-2 text-muted">Loading health metrics...</p>
                        </div>
                    }
                    else if (healthMetrics?.Any() == true)
                    {
                        <div class="system-status">
                            @foreach (var metric in healthMetrics)
                            {
                                <div class="status-item">
                                    <div class="status-info">
                                        <div class="status-details">
                                            <h6>@metric.Name</h6>
                                            <small>@metric.Description</small>
                                        </div>
                                    </div>
                                    <span class="status-badge @GetStatusCssClass(metric.Status)">@metric.Value</span>
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        <div class="text-center py-4 text-muted">
                            <i class="fas fa-heartbeat fa-2x mb-2"></i>
                            <p>Unable to load health metrics</p>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private DashboardStatistics? statistics;
    private RoleStatsDto? roleStats;
    private List<RecentActivityItem> recentActivities = new();
    private List<SystemStatusItem> systemStatus = new();
    private List<HealthMetricItem> healthMetrics = new();
    private bool isLoading = true;
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        await LoadDashboardDataAsync();
    }

    private async Task LoadDashboardDataAsync()
    {
        try
        {
            isLoading = true;
            errorMessage = null;

            Logger.LogDebug("Loading dashboard data");

            // Load dashboard data sequentially to avoid DbContext concurrency issues
            // DbContext is not thread-safe and cannot handle concurrent operations
            statistics = await DashboardService.GetStatisticsAsync();
            recentActivities = await DashboardService.GetRecentActivitiesAsync(5);
            systemStatus = await DashboardService.GetSystemStatusAsync();
            healthMetrics = await DashboardService.GetHealthMetricsAsync();
            roleStats = await AdminRoleService.GetRoleStatisticsAsync();

            Logger.LogInformation("Dashboard data loaded successfully");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading dashboard data");
            errorMessage = "Unable to load dashboard data. Please try again.";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task RefreshDataAsync()
    {
        Logger.LogDebug("Refreshing dashboard data");
        await LoadDashboardDataAsync();
    }

    private string GetTrendClass(int current, int previous)
    {
        if (current > previous) return "up";
        if (current < previous) return "down";
        return "neutral";
    }

    private string GetTrendIcon(int current, int previous)
    {
        if (current > previous) return "fas fa-arrow-up";
        if (current < previous) return "fas fa-arrow-down";
        return "fas fa-minus";
    }

    private string GetStatusCssClass(SystemStatus status)
    {
        return status switch
        {
            SystemStatus.Healthy => "healthy",
            SystemStatus.Warning => "warning",
            SystemStatus.Error => "error",
            _ => "unknown"
        };
    }

    private string GetStatusDisplayText(SystemStatus status)
    {
        return status switch
        {
            SystemStatus.Healthy => "Healthy",
            SystemStatus.Warning => "Warning",
            SystemStatus.Error => "Error",
            _ => "Unknown"
        };
    }
}