@page "/Account/Manage/ChangePassword"

@using System.ComponentModel.DataAnnotations
@using BlazorTemplate
@using BlazorTemplate.Components
@using BlazorTemplate.Components.Account.Shared
@using BlazorTemplate.Data
@using Microsoft.AspNetCore.Identity

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager
@inject ILogger<ChangePassword> Logger

<PageTitle>Change password</PageTitle>

<style>
    .password-header {
        display: flex;
        align-items: center;
        gap: 1rem;
        margin-bottom: 2rem;
    }

    .password-icon {
        width: 60px;
        height: 60px;
        border-radius: 12px;
        background: linear-gradient(135deg, var(--color-primary), var(--color-secondary));
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        font-size: 1.5rem;
        box-shadow: 0 4px 12px rgba(120, 39, 137, 0.3);
    }

    .password-info h2 {
        margin: 0;
        font-size: 1.75rem;
        font-weight: 600;
        color: var(--color-dark);
    }

    .password-info p {
        margin: 0.25rem 0 0 0;
        color: #6c757d;
        font-size: 1rem;
    }

    .security-tips {
        background: linear-gradient(135deg, #e8f4fd, #d1ecf1);
        border: 2px solid #bee5eb;
        border-radius: 12px;
        padding: 1.5rem;
        margin-bottom: 2rem;
    }

    .tips-header {
        display: flex;
        align-items: center;
        gap: 0.75rem;
        margin-bottom: 1rem;
    }

    .tips-icon {
        color: #0c5460;
        font-size: 1.25rem;
    }

    .tips-title {
        font-weight: 600;
        color: #0c5460;
        margin: 0;
    }

    .tips-list {
        margin: 0;
        padding-left: 1.5rem;
        color: #0c5460;
    }

        .tips-list li {
            margin-bottom: 0.5rem;
            font-size: 0.9rem;
        }

    .password-form-section {
        background: white;
        border: 2px solid #e9ecef;
        border-radius: 12px;
        padding: 2rem;
        position: relative;
        transition: all 0.3s ease;
    }

        .password-form-section:hover {
            border-color: var(--color-primary);
            box-shadow: 0 4px 12px rgba(120, 39, 137, 0.1);
        }

    .form-section-header {
        display: flex;
        align-items: center;
        gap: 1rem;
        margin-bottom: 2rem;
        padding-bottom: 1rem;
        border-bottom: 2px solid #e9ecef;
    }

    .section-icon {
        width: 40px;
        height: 40px;
        border-radius: 8px;
        background: linear-gradient(135deg, var(--color-primary), var(--color-secondary));
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        font-size: 1.1rem;
    }

    .section-title {
        font-size: 1.25rem;
        font-weight: 600;
        color: var(--color-dark);
        margin: 0;
    }

    .password-input-group {
        position: relative;
        margin-bottom: 1.5rem;
    }

    .password-toggle {
        position: absolute;
        right: 1rem;
        top: 50%;
        transform: translateY(-50%);
        background: none;
        border: none;
        color: #6c757d;
        cursor: pointer;
        padding: 0.5rem;
        z-index: 5;
        transition: color 0.3s ease;
    }

        .password-toggle:hover {
            color: var(--color-primary);
        }

    .form-floating > .form-control {
        padding-right: 3.5rem;
    }

    .password-strength {
        margin-top: 0.75rem;
        font-size: 0.875rem;
    }

    .strength-meter {
        height: 6px;
        background: #e9ecef;
        border-radius: 3px;
        margin: 0.5rem 0;
        overflow: hidden;
    }

    .strength-fill {
        height: 100%;
        width: 0%;
        transition: all 0.3s ease;
        border-radius: 3px;
    }

    .strength-weak .strength-fill {
        width: 33%;
        background: linear-gradient(135deg, var(--color-danger), #dc3545);
    }

    .strength-medium .strength-fill {
        width: 66%;
        background: linear-gradient(135deg, var(--color-warning), #ffc107);
    }

    .strength-strong .strength-fill {
        width: 100%;
        background: linear-gradient(135deg, var(--color-success), #28a745);
    }

    .strength-text {
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .strength-indicator {
        width: 12px;
        height: 12px;
        border-radius: 50%;
        background: #e9ecef;
    }

    .strength-weak .strength-indicator {
        background: var(--color-danger);
    }

    .strength-medium .strength-indicator {
        background: var(--color-warning);
    }

    .strength-strong .strength-indicator {
        background: var(--color-success);
    }

    .password-requirements {
        background: #f8f9fa;
        border: 1px solid #dee2e6;
        border-radius: 8px;
        padding: 1rem;
        margin-top: 1rem;
    }

    .requirements-title {
        font-weight: 600;
        font-size: 0.9rem;
        margin-bottom: 0.75rem;
        color: var(--color-dark);
    }

    .requirement-item {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        margin-bottom: 0.5rem;
        font-size: 0.85rem;
        transition: color 0.3s ease;
    }

    .requirement-icon {
        width: 16px;
        height: 16px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 0.7rem;
        background: #e9ecef;
        color: #6c757d;
        transition: all 0.3s ease;
    }

    .requirement-item.valid {
        color: var(--color-success);
    }

        .requirement-item.valid .requirement-icon {
            background: var(--color-success);
            color: white;
        }

    .submit-section {
        background: linear-gradient(135deg, #f8f9fa, #e9ecef);
        border: 2px solid #dee2e6;
        border-radius: 12px;
        padding: 2rem;
        text-align: center;
        margin-top: 2rem;
    }

    .submit-info {
        margin-bottom: 1.5rem;
    }

        .submit-info h4 {
            margin: 0 0 0.5rem 0;
            color: var(--color-dark);
            font-size: 1.1rem;
        }

        .submit-info p {
            margin: 0;
            color: #6c757d;
            font-size: 0.9rem;
        }

    .submit-actions {
        display: flex;
        gap: 1rem;
        justify-content: center;
        flex-wrap: wrap;
    }

    /* Loading overlay */
    .saving-overlay {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(255, 255, 255, 0.9);
        display: flex;
        align-items: center;
        justify-content: center;
        border-radius: 12px;
        z-index: 10;
    }

    .spinner {
        width: 2.5rem;
        height: 2.5rem;
        border: 3px solid #e9ecef;
        border-top: 3px solid var(--color-primary);
        border-radius: 50%;
        animation: spin 1s linear infinite;
    }

    @@keyframes spin {
        0%

    {
        transform: rotate(0deg);
    }

    100% {
        transform: rotate(360deg);
    }

    }

    /* Mobile responsive */
    @@media (max-width: 768px) {
        .password-header

    {
        text-align: center;
        flex-direction: column;
    }

    .password-form-section {
        padding: 1.5rem;
    }

    .submit-actions {
        flex-direction: column;
    }

        .submit-actions .btn {
            width: 100%;
        }

    }
</style>

<!-- Page Header -->
<div class="password-header">
    <div class="password-icon">
        <i class="fas fa-key"></i>
    </div>
    <div class="password-info">
        <h2>Change Password</h2>
        <p>Update your account password to keep your account secure</p>
    </div>
</div>

<!-- Status Message -->
<StatusMessage Message="@message" />

<!-- Security Tips -->
<div class="security-tips">
    <div class="tips-header">
        <i class="fas fa-shield-alt tips-icon"></i>
        <h3 class="tips-title">Password Security Tips</h3>
    </div>
    <ul class="tips-list">
        <li>Use a unique password that you don't use elsewhere</li>
        <li>Include a mix of uppercase letters, lowercase letters, numbers, and symbols</li>
        <li>Make it at least 12 characters long</li>
        <li>Avoid personal information like names, birthdays, or common words</li>
        <li>Consider using a password manager to generate and store strong passwords</li>
    </ul>
</div>

<!-- Password Change Form -->
<div class="password-form-section">
    @if (isChangingPassword)
    {
        <div class="saving-overlay">
            <div class="spinner"></div>
        </div>
    }

    <div class="form-section-header">
        <div class="section-icon">
            <i class="fas fa-lock"></i>
        </div>
        <div>
            <h3 class="section-title">Update Your Password</h3>
        </div>
    </div>

    <EditForm Model="Input" FormName="change-password" OnValidSubmit="OnValidSubmitAsync" method="post">
        <DataAnnotationsValidator />
        <ValidationSummary class="text-danger" role="alert" />

        <!-- Current Password -->
        <div class="password-input-group">
            <div class="form-floating">
                <InputText type="@(showOldPassword ? "text" : "password")" @bind-Value="Input.OldPassword" class="form-control" autocomplete="current-password" aria-required="true" placeholder="Enter your current password" />
                <label for="old-password">Current Password</label>
                <button type="button" class="password-toggle" @onclick="() => showOldPassword = !showOldPassword">
                    <i class="fas @(showOldPassword ? "fa-eye-slash" : "fa-eye")"></i>
                </button>
            </div>
            <ValidationMessage For="() => Input.OldPassword" class="validation-message" />
        </div>

        <!-- New Password -->
        <div class="password-input-group">
            <div class="form-floating">
                <InputText type="@(showNewPassword ? "text" : "password")" @bind-Value="Input.NewPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="Enter your new password" @oninput="OnNewPasswordInput" />
                <label for="new-password">New Password</label>
                <button type="button" class="password-toggle" @onclick="() => showNewPassword = !showNewPassword">
                    <i class="fas @(showNewPassword ? "fa-eye-slash" : "fa-eye")"></i>
                </button>
            </div>
            <ValidationMessage For="() => Input.NewPassword" class="validation-message" />

            @if (!string.IsNullOrEmpty(Input.NewPassword))
            {
                <div class="password-strength">
                    <div class="strength-meter @GetStrengthClass()">
                        <div class="strength-fill"></div>
                    </div>
                    <div class="strength-text">
                        <div class="strength-indicator"></div>
                        <span>Password strength: <strong>@passwordStrengthText</strong></span>
                    </div>
                </div>

                <div class="password-requirements">
                    <div class="requirements-title">Password Requirements:</div>
                    <div class="requirement-item @(Input.NewPassword.Length >= 6 ? "valid" : "")">
                        <div class="requirement-icon">
                            <i class="fas @(Input.NewPassword.Length >= 6 ? "fa-check" : "fa-times")"></i>
                        </div>
                        <span>At least 6 characters long</span>
                    </div>
                    <div class="requirement-item @(HasUpperAndLower(Input.NewPassword) ? "valid" : "")">
                        <div class="requirement-icon">
                            <i class="fas @(HasUpperAndLower(Input.NewPassword) ? "fa-check" : "fa-times")"></i>
                        </div>
                        <span>Contains uppercase and lowercase letters</span>
                    </div>
                    <div class="requirement-item @(HasNumber(Input.NewPassword) ? "valid" : "")">
                        <div class="requirement-icon">
                            <i class="fas @(HasNumber(Input.NewPassword) ? "fa-check" : "fa-times")"></i>
                        </div>
                        <span>Contains at least one number</span>
                    </div>
                    <div class="requirement-item @(HasSpecialChar(Input.NewPassword) ? "valid" : "")">
                        <div class="requirement-icon">
                            <i class="fas @(HasSpecialChar(Input.NewPassword) ? "fa-check" : "fa-times")"></i>
                        </div>
                        <span>Contains special characters</span>
                    </div>
                </div>
            }
        </div>

        <!-- Confirm New Password -->
        <div class="password-input-group">
            <div class="form-floating">
                <InputText type="@(showConfirmPassword ? "text" : "password")" @bind-Value="Input.ConfirmPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="Confirm your new password" @oninput="OnConfirmPasswordInput" />
                <label for="confirm-password">Confirm New Password</label>
                <button type="button" class="password-toggle" @onclick="() => showConfirmPassword = !showConfirmPassword">
                    <i class="fas @(showConfirmPassword ? "fa-eye-slash" : "fa-eye")"></i>
                </button>
            </div>
            <ValidationMessage For="() => Input.ConfirmPassword" class="validation-message" />
            @if (!string.IsNullOrEmpty(Input.ConfirmPassword) && !string.IsNullOrEmpty(Input.NewPassword))
            {
                @if (Input.NewPassword == Input.ConfirmPassword)
                {
                    <div class="valid-feedback">Passwords match!</div>
                }
                else
                {
                    <div class="validation-message">Passwords do not match</div>
                }
            }
        </div>

        <!-- Submit Section -->
        <div class="submit-section">
            <div class="submit-info">
                <h4><i class="fas fa-lock me-2"></i>Ready to Update Your Password?</h4>
                <p>You'll be signed out of other devices for security after changing your password.</p>
            </div>
            <div class="submit-actions">
                <button type="submit" class="btn btn-primary" disabled="@(isChangingPassword || !IsFormValid())">
                    @if (isChangingPassword)
                    {
                        <i class="fas fa-spinner fa-spin me-2"></i>
                        <span>Updating Password...</span>
                    }
                    else
                    {
                        <i class="fas fa-key me-2"></i>
                        <span>Update Password</span>
                    }
                </button>
                <a href="Account/Manage" class="btn btn-secondary">
                    <i class="fas fa-arrow-left me-2"></i>
                    Cancel
                </a>
            </div>
        </div>
    </EditForm>
</div>

@code {
    private string? message;
    private ApplicationUser user = default!;
    private bool hasPassword;
    private bool isChangingPassword = false;
    private bool showOldPassword = false;
    private bool showNewPassword = false;
    private bool showConfirmPassword = false;
    private string passwordStrengthText = "Enter a password";
    private PasswordStrength passwordStrength = PasswordStrength.None;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        hasPassword = await UserManager.HasPasswordAsync(user);
        if (!hasPassword)
        {
            RedirectManager.RedirectTo("Account/Manage/SetPassword");
        }
    }

    private async Task OnValidSubmitAsync()
    {
        isChangingPassword = true;
        StateHasChanged();

        try
        {
            var changePasswordResult = await UserManager.ChangePasswordAsync(user, Input.OldPassword, Input.NewPassword);
            if (!changePasswordResult.Succeeded)
            {
                message = $"Error: {string.Join(",", changePasswordResult.Errors.Select(error => error.Description))}";
                return;
            }

            await SignInManager.RefreshSignInAsync(user);
            Logger.LogInformation("User changed their password successfully.");

            // Simulate a brief delay for better UX
            await Task.Delay(1500);

            RedirectManager.RedirectToCurrentPageWithStatus("Your password has been changed successfully!", HttpContext);
        }
        finally
        {
            isChangingPassword = false;
            StateHasChanged();
        }
    }

    private void OnNewPasswordInput(ChangeEventArgs e)
    {
        var password = e.Value?.ToString() ?? "";
        CheckPasswordStrength(password);
    }

    private void OnConfirmPasswordInput(ChangeEventArgs e)
    {
        StateHasChanged(); // Trigger re-render to show password match status
    }

    private void CheckPasswordStrength(string password)
    {
        if (string.IsNullOrEmpty(password))
        {
            passwordStrength = PasswordStrength.None;
            passwordStrengthText = "Enter a password";
            return;
        }

        int strength = 0;
        if (password.Length >= 6) strength++;
        if (HasUpperAndLower(password)) strength++;
        if (HasNumber(password)) strength++;
        if (HasSpecialChar(password)) strength++;

        if (strength < 2)
        {
            passwordStrength = PasswordStrength.Weak;
            passwordStrengthText = "Weak";
        }
        else if (strength < 4)
        {
            passwordStrength = PasswordStrength.Medium;
            passwordStrengthText = "Medium";
        }
        else
        {
            passwordStrength = PasswordStrength.Strong;
            passwordStrengthText = "Strong";
        }
    }

    private string GetStrengthClass()
    {
        return passwordStrength switch
        {
            PasswordStrength.Weak => "strength-weak",
            PasswordStrength.Medium => "strength-medium",
            PasswordStrength.Strong => "strength-strong",
            _ => ""
        };
    }

    private bool HasUpperAndLower(string password) =>
        System.Text.RegularExpressions.Regex.IsMatch(password, @"[a-z]") &&
        System.Text.RegularExpressions.Regex.IsMatch(password, @"[A-Z]");

    private bool HasNumber(string password) =>
        System.Text.RegularExpressions.Regex.IsMatch(password, @"[0-9]");

    private bool HasSpecialChar(string password) =>
        System.Text.RegularExpressions.Regex.IsMatch(password, @"[^a-zA-Z0-9]");

    private bool IsFormValid() =>
        !string.IsNullOrEmpty(Input.OldPassword) &&
        !string.IsNullOrEmpty(Input.NewPassword) &&
        !string.IsNullOrEmpty(Input.ConfirmPassword) &&
        Input.NewPassword == Input.ConfirmPassword &&
        Input.NewPassword.Length >= 6;

    private enum PasswordStrength
    {
        None,
        Weak,
        Medium,
        Strong
    }

    private sealed class InputModel
    {
        [Required]
        [DataType(DataType.Password)]
        [Display(Name = "Current password")]
        public string OldPassword { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "New password")]
        public string NewPassword { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm new password")]
        [Compare("NewPassword", ErrorMessage = "The new password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";
    }
}