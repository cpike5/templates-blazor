@page "/admin/users/{UserId}"
@using BlazorTemplate.Components.Layout
@using BlazorTemplate.Data
@using BlazorTemplate.Models
@using BlazorTemplate.Services
@using Microsoft.AspNetCore.Authorization
@layout AdminLayout
@attribute [Authorize(Roles = "Administrator")]
@inject IUserManagementService UserManagementService
@inject NavigationManager Navigation

<style>
    .user-details-container {
        max-width: 1400px;
        margin: 0 auto;
        padding: 0 1rem;
    }

    .breadcrumb-nav {
        margin-bottom: 1.5rem;
    }

    .breadcrumb {
        background: transparent;
        padding: 0;
        margin: 0;
        font-size: 0.875rem;
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .breadcrumb-item a {
        color: var(--color-primary);
        text-decoration: none;
    }

        .breadcrumb-item a:hover {
            text-decoration: underline;
        }

    .breadcrumb-item.active {
        color: var(--color-dark);
        font-weight: 600;
    }

    .breadcrumb-item + .breadcrumb-item::before {
        content: "›";
        color: #6c757d;
        font-size: 1.1rem;
    }

    /* User Header */
    .user-header {
        background: white;
        border: 1px solid #e9ecef;
        border-radius: 12px;
        padding: 2rem;
        margin-bottom: 2rem;
        display: flex;
        align-items: center;
        gap: 2rem;
        box-shadow: 0 2px 4px rgba(0,0,0,0.05);
    }

    .user-avatar-large {
        width: 80px;
        height: 80px;
        border-radius: 50%;
        background: linear-gradient(135deg, var(--color-primary), var(--color-secondary));
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        font-size: 1.75rem;
        font-weight: 600;
        flex-shrink: 0;
        position: relative;
    }

    .status-indicator {
        position: absolute;
        bottom: 4px;
        right: 4px;
        width: 20px;
        height: 20px;
        border-radius: 50%;
        border: 3px solid white;
        background: var(--color-success);
    }

    .user-basic-info {
        flex: 1;
    }

        .user-basic-info h1 {
            margin: 0 0 0.75rem 0;
            font-size: 1.75rem;
            font-weight: 600;
            color: var(--color-dark);
        }

    .user-meta {
        display: flex;
        flex-wrap: wrap;
        gap: 1.5rem;
        margin-bottom: 1rem;
    }

    .meta-item {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        color: #6c757d;
        font-size: 0.875rem;
    }

        .meta-item i {
            width: 16px;
            text-align: center;
        }

    .user-badges {
        display: flex;
        gap: 0.75rem;
        flex-wrap: wrap;
    }

    .status-badge {
        padding: 0.375rem 0.875rem;
        border-radius: 20px;
        font-size: 0.75rem;
        font-weight: 600;
        text-transform: uppercase;
        letter-spacing: 0.5px;
        display: inline-flex;
        align-items: center;
        gap: 0.5rem;
    }

        .status-badge.active {
            background: #d4edda;
            color: #155724;
        }

        .status-badge.locked {
            background: #f8d7da;
            color: #721c24;
        }

    .role-badge {
        padding: 0.375rem 0.875rem;
        border-radius: 20px;
        font-size: 0.75rem;
        font-weight: 600;
        text-transform: uppercase;
        letter-spacing: 0.5px;
    }

        .role-badge.user {
            background: #d1ecf1;
            color: #0c5460;
        }

        .role-badge.manager {
            background: #fff3cd;
            color: #856404;
        }

        .role-badge.administrator {
            background: #f8d7da;
            color: #721c24;
        }

    .user-actions {
        display: flex;
        gap: 0.75rem;
        flex-shrink: 0;
    }

    /* Content Layout */
    .content-layout {
        display: grid;
        grid-template-columns: 2fr 1fr;
        gap: 2rem;
        align-items: start;
    }

    .main-content {
        display: flex;
        flex-direction: column;
        gap: 1.5rem;
    }

    .sidebar-content {
        display: flex;
        flex-direction: column;
        gap: 1.5rem;
    }

    /* Section Cards */
    .section-card {
        background: white;
        border: 1px solid #e9ecef;
        border-radius: 12px;
        overflow: hidden;
        box-shadow: 0 2px 4px rgba(0,0,0,0.05);
    }

    .section-header {
        background: #f8f9fa;
        padding: 1.25rem 1.5rem;
        border-bottom: 1px solid #e9ecef;
        display: flex;
        align-items: center;
        gap: 0.75rem;
    }

    .section-icon {
        width: 36px;
        height: 36px;
        border-radius: 8px;
        background: linear-gradient(135deg, var(--color-primary), var(--color-secondary));
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        font-size: 1rem;
    }

    .section-title {
        font-size: 1.125rem;
        font-weight: 600;
        color: var(--color-dark);
        margin: 0;
    }

    .section-body {
        padding: 1.5rem;
    }

    /* Form Styling */
    .form-row {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 1.5rem;
        margin-bottom: 1.5rem;
    }

    .form-group {
        margin-bottom: 1.5rem;
    }

        .form-group:last-child {
            margin-bottom: 0;
        }

    .form-label {
        display: block;
        font-weight: 600;
        color: var(--color-dark);
        margin-bottom: 0.5rem;
        font-size: 0.875rem;
    }

    .form-control {
        width: 100%;
        padding: 0.75rem 1rem;
        border: 1px solid #dee2e6;
        border-radius: 8px;
        font-size: 0.875rem;
        transition: border-color 0.2s ease, box-shadow 0.2s ease;
        background: white;
    }

        .form-control:focus {
            border-color: var(--color-primary);
            outline: none;
            box-shadow: 0 0 0 3px rgba(120, 39, 137, 0.1);
        }

        .form-control:disabled {
            background: #f8f9fa;
            color: #6c757d;
            cursor: not-allowed;
        }

    .form-help {
        font-size: 0.75rem;
        color: #6c757d;
        margin-top: 0.375rem;
        line-height: 1.4;
    }

    /* Role Assignment */
    .role-assignment {
        display: flex;
        flex-direction: column;
        gap: 1rem;
    }

    .role-item {
        display: flex;
        align-items: center;
        justify-content: space-between;
        padding: 1rem;
        border: 1px solid #e9ecef;
        border-radius: 8px;
        transition: all 0.2s ease;
        background: white;
    }

        .role-item:hover {
            border-color: var(--color-primary);
            box-shadow: 0 2px 8px rgba(120, 39, 137, 0.1);
        }

        .role-item.assigned {
            border-color: var(--color-success);
            background: #f8fff9;
        }

    .role-info {
        display: flex;
        align-items: center;
        gap: 0.75rem;
        flex: 1;
    }

    .role-icon-sm {
        width: 32px;
        height: 32px;
        border-radius: 6px;
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        font-size: 0.875rem;
        flex-shrink: 0;
    }

        .role-icon-sm.administrator {
            background: linear-gradient(135deg, #dc3545, #c82333);
        }

        .role-icon-sm.manager {
            background: linear-gradient(135deg, #ffc107, #e0a800);
        }

        .role-icon-sm.user {
            background: linear-gradient(135deg, #17a2b8, #138496);
        }

    .role-details h6 {
        margin: 0 0 0.25rem 0;
        font-weight: 600;
        color: var(--color-dark);
        font-size: 0.875rem;
    }

    .role-details small {
        color: #6c757d;
        font-size: 0.75rem;
        line-height: 1.3;
    }

    .role-toggle {
        width: 48px;
        height: 24px;
        background: #dee2e6;
        border-radius: 12px;
        position: relative;
        cursor: pointer;
        transition: all 0.3s ease;
        border: none;
        outline: none;
    }

        .role-toggle.active {
            background: var(--color-success);
        }

        .role-toggle::after {
            content: '';
            position: absolute;
            top: 2px;
            left: 2px;
            width: 20px;
            height: 20px;
            background: white;
            border-radius: 50%;
            transition: all 0.3s ease;
            box-shadow: 0 1px 3px rgba(0,0,0,0.2);
        }

        .role-toggle.active::after {
            transform: translateX(24px);
        }

    /* Sidebar Components */
    .status-section {
        padding: 1.5rem;
    }

    .status-item {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 1.25rem;
    }

        .status-item:last-child {
            margin-bottom: 0;
        }

    .status-label {
        font-weight: 600;
        color: var(--color-dark);
        font-size: 0.875rem;
        margin-bottom: 0.25rem;
    }

    .status-value {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        font-size: 0.875rem;
    }

        .status-value.success {
            color: var(--color-success);
        }

        .status-value.warning {
            color: #f39c12;
        }

    .activity-list {
        display: flex;
        flex-direction: column;
        gap: 1rem;
    }

    .activity-item {
        display: flex;
        align-items: center;
        gap: 0.75rem;
        padding: 0.75rem 0;
    }

    .activity-icon {
        width: 32px;
        height: 32px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 0.875rem;
        flex-shrink: 0;
    }

        .activity-icon.login {
            background: #e8f5e9;
            color: #2e7d32;
        }

        .activity-icon.logout {
            background: #ffebee;
            color: #d32f2f;
        }

        .activity-icon.update {
            background: #e3f2fd;
            color: #1976d2;
        }

    .activity-details {
        flex: 1;
    }

        .activity-details h6 {
            margin: 0 0 0.25rem 0;
            font-weight: 600;
            color: var(--color-dark);
            font-size: 0.875rem;
        }

        .activity-details small {
            color: #6c757d;
            font-size: 0.75rem;
        }

    .activity-time {
        color: #6c757d;
        font-size: 0.75rem;
        flex-shrink: 0;
    }

    /* Danger Zone */
    .danger-zone {
        border-color: #f8d7da;
    }

        .danger-zone .section-header {
            background: rgba(248, 215, 218, 0.3);
            border-bottom-color: #f8d7da;
        }

        .danger-zone .section-icon {
            background: linear-gradient(135deg, var(--color-danger), #dc3545);
        }

    .danger-actions {
        display: flex;
        flex-direction: column;
        gap: 1rem;
    }

    .danger-action {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 1rem;
        border: 1px solid #f8d7da;
        border-radius: 8px;
        background: rgba(248, 215, 218, 0.1);
    }

    .danger-info h6 {
        margin: 0 0 0.25rem 0;
        color: var(--color-danger);
        font-weight: 600;
        font-size: 0.875rem;
    }

    .danger-info small {
        color: #721c24;
        font-size: 0.75rem;
    }

    /* Responsive Design */
    @@media (max-width: 1200px) {
        .content-layout

    {
        grid-template-columns: 1fr;
    }

    .sidebar-content {
        order: -1;
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
        gap: 1.5rem;
    }

    }

    @@media (max-width: 768px) {
        .user-details-container

    {
        padding: 0 0.5rem;
    }

    .user-header {
        flex-direction: column;
        text-align: center;
        gap: 1.5rem;
    }

    .user-actions {
        width: 100%;
        justify-content: center;
    }

    .user-meta {
        justify-content: center;
    }

    .form-row {
        grid-template-columns: 1fr;
        gap: 1rem;
    }

    .section-body {
        padding: 1rem;
    }

    .sidebar-content {
        grid-template-columns: 1fr;
    }

    }

    @@media (max-width: 576px) {
        .user-actions

    {
        flex-direction: column;
    }

    .user-actions .btn {
        width: 100%;
    }

    }
</style>

<div class="user-details-container">
    <!-- Breadcrumb -->
    <nav class="breadcrumb-nav">
        <ol class="breadcrumb">
            <li class="breadcrumb-item"><a href="/admin/users">Users</a></li>
            <li class="breadcrumb-item active">@(userDetail?.UserName ?? "Loading...")</li>
        </ol>
    </nav>

    <!-- User Header -->
    <div class="user-header">
        <div class="user-avatar-large">
            @GetUserInitials(userDetail?.UserName ?? userDetail?.Email ?? "?")
            <div class="status-indicator"></div>
        </div>
        <div class="user-basic-info">
            <h1>@(userDetail?.UserName ?? "Loading...")</h1>
            <div class="user-meta">
                <div class="meta-item">
                    <i class="fas fa-envelope"></i>
                    <span>@(userDetail?.Email ?? "")</span>
                </div>
                <div class="meta-item">
                    <i class="fas fa-calendar"></i>
                    <span>Member since @(userDetail?.CreatedAt.ToString("MMM d, yyyy") ?? "")</span>
                </div>
                <div class="meta-item">
                    <i class="fas fa-clock"></i>
                    <span>Last login: Never</span>
                </div>
            </div>
            <div class="user-badges">
                <span class="status-badge @GetUserStatusClass()">
                    <i class="fas fa-circle" style="font-size: 0.5rem;"></i>
                    @GetUserStatus()
                </span>
                @if (userDetail?.Roles?.Any() == true)
                {
                    @foreach (var role in userDetail.Roles)
                    {
                        <span class="role-badge @role.ToLower()">@role</span>
                    }
                }
            </div>
        </div>
        <div class="user-actions">
            <button class="btn btn-outline-primary" @onclick="ResendEmailConfirmation" disabled="@(userDetail?.EmailConfirmed == true)">
                <i class="fas fa-envelope me-1"></i>
                Resend Email
            </button>
            <button class="btn btn-primary" @onclick="SaveChanges" disabled="@isSaving">
                @if (isSaving)
                {
                    <i class="fas fa-spinner fa-spin me-1"></i>
                    <text>Saving...</text>
                }
                else
                {
                    <i class="fas fa-save me-1"></i>
                    <text>Save Changes</text>
                }
            </button>
        </div>
    </div>

    <!-- Content Layout -->
    <div class="content-layout">
        <!-- Main Content -->
        <div class="main-content">
            <!-- Profile Information -->
            <div class="section-card">
                <div class="section-header">
                    <div class="section-icon">
                        <i class="fas fa-user-edit"></i>
                    </div>
                    <h3 class="section-title">Profile Information</h3>
                </div>
                <div class="section-body">
                    <div class="form-row">
                        <div class="form-group">
                            <label class="form-label">User Name</label>
                            <input type="text" class="form-control" @bind="editModel.UserName" />
                        </div>
                        <div class="form-group">
                            <label class="form-label">Email Address</label>
                            <input type="email" class="form-control" @bind="editModel.Email" />
                        </div>
                    </div>
                    <div class="form-row">
                        <div class="form-group">
                            <label class="form-label">Phone Number</label>
                            <input type="tel" class="form-control" @bind="editModel.PhoneNumber" />
                        </div>
                        <div class="form-group">
                            <label class="form-label">Email Confirmed</label>
                            <select class="form-control" @bind="editModel.EmailConfirmed">
                                <option value="true">Yes</option>
                                <option value="false">No</option>
                            </select>
                        </div>
                    </div>
                    <div class="form-row">
                        <div class="form-group">
                            <label class="form-label">Two-Factor Authentication</label>
                            <select class="form-control" @bind="editModel.TwoFactorEnabled">
                                <option value="true">Enabled</option>
                                <option value="false">Disabled</option>
                            </select>
                        </div>
                        <div class="form-group">
                            <label class="form-label">Lockout Enabled</label>
                            <select class="form-control" @bind="editModel.LockoutEnabled">
                                <option value="true">Yes</option>
                                <option value="false">No</option>
                            </select>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Role Assignment -->
            <div class="section-card">
                <div class="section-header">
                    <div class="section-icon">
                        <i class="fas fa-user-tag"></i>
                    </div>
                    <h3 class="section-title">Role Assignment</h3>
                </div>
                <div class="section-body">
                    <div class="role-assignment">
                        @foreach (var role in availableRoles)
                        {
                            var isAssigned = editModel.Roles.Contains(role.Name);
                            <div class="role-item @(isAssigned ? "assigned" : "")">
                                <div class="role-info">
                                    <div class="role-icon-sm @role.Name.ToLower()">
                                        <i class="fas @GetRoleIcon(role.Name)"></i>
                                    </div>
                                    <div class="role-details">
                                        <h6>@role.Name</h6>
                                        <small>@GetRoleDescription(role.Name)</small>
                                    </div>
                                </div>
                                <button class="role-toggle @(isAssigned ? "active" : "")" @onclick="() => ToggleRole(role.Name)"></button>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>

        <!-- Sidebar Content -->
        <div class="sidebar-content">
            <!-- Account Status -->
            <div class="section-card">
                <div class="section-header">
                    <div class="section-icon">
                        <i class="fas fa-shield-check"></i>
                    </div>
                    <h3 class="section-title">Account Status</h3>
                </div>
                <div class="status-section">
                    <div class="status-item">
                        <div>
                            <div class="status-label">Account Status</div>
                            <div class="status-value @GetUserStatusClass()">
                                <i class="fas @GetStatusIcon()"></i>
                                @GetUserStatus()
                            </div>
                        </div>
                    </div>
                    <div class="status-item">
                        <div>
                            <div class="status-label">Email Verified</div>
                            <div class="status-value @(userDetail?.EmailConfirmed == true ? "success" : "warning")">
                                <i class="fas @(userDetail?.EmailConfirmed == true ? "fa-check-circle" : "fa-exclamation-triangle")"></i>
                                @(userDetail?.EmailConfirmed == true ? "Verified" : "Not Verified")
                            </div>
                        </div>
                        @if (userDetail?.EmailConfirmed != true)
                        {
                            <button class="btn btn-outline-primary btn-sm" @onclick="ResendEmailConfirmation">
                                Resend Verification
                            </button>
                        }
                    </div>
                    <div class="status-item">
                        <div>
                            <div class="status-label">Two-Factor Authentication</div>
                            <div class="status-value @(userDetail?.TwoFactorEnabled == true ? "success" : "warning")">
                                <i class="fas @(userDetail?.TwoFactorEnabled == true ? "fa-check-circle" : "fa-exclamation-triangle")"></i>
                                @(userDetail?.TwoFactorEnabled == true ? "Enabled" : "Not Enabled")
                            </div>
                        </div>
                    </div>
                    <div class="status-item">
                        <div>
                            <div class="status-label">Access Failed Count</div>
                            <div class="status-value">
                                @(userDetail?.AccessFailedCount ?? 0)
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Recent Activity -->
            <div class="section-card">
                <div class="section-header">
                    <div class="section-icon">
                        <i class="fas fa-history"></i>
                    </div>
                    <h3 class="section-title">Recent Activity</h3>
                </div>
                <div class="section-body">
                    <div class="activity-list">
                        @if (userDetail?.RecentActivity?.Any() == true)
                        {
                            @foreach (var activity in userDetail.RecentActivity)
                            {
                                <div class="activity-item">
                                    <div class="activity-icon @GetActivityIconClass(activity.Action)">
                                        <i class="fas @GetActivityIcon(activity.Action)"></i>
                                    </div>
                                    <div class="activity-details">
                                        <h6>@activity.Action</h6>
                                        <small>@activity.Details</small>
                                        @if (!string.IsNullOrEmpty(activity.IpAddress))
                                        {
                                            <small>From @activity.IpAddress</small>
                                        }
                                    </div>
                                    <div class="activity-time">@GetTimeAgo(activity.Timestamp)</div>
                                </div>
                            }
                        }
                        else
                        {
                            <div class="text-center text-muted py-3">
                                <i class="fas fa-history me-2"></i>
                                No recent activity found.
                            </div>
                        }
                    </div>
                </div>
            </div>

            <!-- Danger Zone -->
            <div class="section-card danger-zone">
                <div class="section-header">
                    <div class="section-icon">
                        <i class="fas fa-exclamation-triangle"></i>
                    </div>
                    <h3 class="section-title">Danger Zone</h3>
                </div>
                <div class="section-body">
                    <div class="danger-actions">
                        <div class="danger-action">
                            <div class="danger-info">
                                <h6>@(IsUserLocked() ? "Unlock Account" : "Lock Account")</h6>
                                <small>@(IsUserLocked() ? "Allow user to login" : "Prevent user from logging in")</small>
                            </div>
                            <button class="btn btn-outline-danger btn-sm" @onclick="ToggleLockUser">
                                @(IsUserLocked() ? "Unlock Account" : "Lock Account")
                            </button>
                        </div>
                        <div class="danger-action">
                            <div class="danger-info">
                                <h6>Reset Password</h6>
                                <small>Force user to create new password</small>
                            </div>
                            <button class="btn btn-outline-danger btn-sm" @onclick="ResetPassword">
                                Reset Password
                            </button>
                        </div>
                        <div class="danger-action">
                            <div class="danger-info">
                                <h6>Delete Account</h6>
                                <small>Permanently remove user account</small>
                            </div>
                            <button class="btn btn-danger btn-sm" @onclick="DeleteUser">
                                Delete Account
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter] public string UserId { get; set; } = string.Empty;

    private UserDetailDto? userDetail;
    private UpdateUserRequest editModel = new();
    private List<RoleInfo> availableRoles = new();
    private bool isLoading = true;
    private bool isSaving = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadUserDetail();
        await LoadAvailableRoles();
    }

    private async Task LoadUserDetail()
    {
        isLoading = true;
        try
        {
            userDetail = await UserManagementService.GetUserByIdAsync(UserId);
            if (userDetail != null)
            {
                editModel = new UpdateUserRequest
                {
                    Email = userDetail.Email,
                    UserName = userDetail.UserName,
                    PhoneNumber = userDetail.PhoneNumber,
                    EmailConfirmed = userDetail.EmailConfirmed,
                    TwoFactorEnabled = userDetail.TwoFactorEnabled,
                    LockoutEnabled = userDetail.LockoutEnabled,
                    Roles = userDetail.Roles.ToList()
                };
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading user detail: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task LoadAvailableRoles()
    {
        // Mock available roles - in a real app, you'd get these from a role service
        availableRoles = new List<RoleInfo>
        {
            new RoleInfo { Name = "User" },
            new RoleInfo { Name = "Manager" },
            new RoleInfo { Name = "Administrator" }
        };
    }

    private async Task SaveChanges()
    {
        if (userDetail == null) return;

        isSaving = true;
        try
        {
            var result = await UserManagementService.UpdateUserAsync(UserId, editModel);
            if (result.Succeeded)
            {
                await LoadUserDetail(); // Reload to get updated data
                Console.WriteLine("User updated successfully");
            }
            else
            {
                Console.WriteLine($"Error updating user: {string.Join(", ", result.Errors.Select(e => e.Description))}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving changes: {ex.Message}");
        }
        finally
        {
            isSaving = false;
            StateHasChanged();
        }
    }

    private async Task ToggleLockUser()
    {
        if (userDetail == null) return;

        try
        {
            var result = IsUserLocked() 
                ? await UserManagementService.UnlockUserAsync(UserId)
                : await UserManagementService.LockUserAsync(UserId);
                
            if (result.Succeeded)
            {
                await LoadUserDetail();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error toggling user lock: {ex.Message}");
        }
    }

    private async Task ResetPassword()
    {
        try
        {
            var newPassword = "TempPassword123!"; // In a real app, generate a secure password
            var result = await UserManagementService.ResetUserPasswordAsync(UserId, newPassword);
            if (result.Succeeded)
            {
                Console.WriteLine($"Password reset successfully. New password: {newPassword}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error resetting password: {ex.Message}");
        }
    }

    private async Task DeleteUser()
    {
        try
        {
            var result = await UserManagementService.DeleteUserAsync(UserId);
            if (result.Succeeded)
            {
                Navigation.NavigateTo("/admin/users");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting user: {ex.Message}");
        }
    }

    private async Task ResendEmailConfirmation()
    {
        try
        {
            var result = await UserManagementService.ResendEmailConfirmationAsync(UserId);
            if (result.Succeeded)
            {
                Console.WriteLine("Email confirmation resent successfully");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error resending email confirmation: {ex.Message}");
        }
    }

    private void ToggleRole(string roleName)
    {
        if (editModel.Roles.Contains(roleName))
        {
            editModel.Roles.Remove(roleName);
        }
        else
        {
            editModel.Roles.Add(roleName);
        }
        StateHasChanged();
    }

    private string GetUserInitials(string name)
    {
        if (string.IsNullOrEmpty(name))
            return "?";

        var parts = name.Split('@')[0].Split('.');
        if (parts.Length >= 2)
        {
            return $"{parts[0][0]}{parts[1][0]}".ToUpper();
        }
        
        return name.Length >= 2 ? name.Substring(0, 2).ToUpper() : name.ToUpper();
    }

    private string GetUserStatus()
    {
        if (userDetail == null) return "Unknown";
        if (IsUserLocked()) return "Locked";
        if (!userDetail.EmailConfirmed) return "Pending";
        return "Active";
    }

    private string GetUserStatusClass()
    {
        if (userDetail == null) return "";
        if (IsUserLocked()) return "warning";
        if (!userDetail.EmailConfirmed) return "warning";
        return "success";
    }

    private string GetStatusIcon()
    {
        if (userDetail == null) return "fa-question";
        if (IsUserLocked()) return "fa-lock";
        if (!userDetail.EmailConfirmed) return "fa-clock";
        return "fa-check-circle";
    }

    private bool IsUserLocked()
    {
        return userDetail?.LockoutEnd.HasValue == true && userDetail.LockoutEnd > DateTimeOffset.UtcNow;
    }

    private string GetRoleIcon(string roleName)
    {
        return roleName.ToLower() switch
        {
            "administrator" => "fa-crown",
            "manager" => "fa-user-tie",
            "user" => "fa-user",
            _ => "fa-user"
        };
    }

    private string GetRoleDescription(string roleName)
    {
        return roleName.ToLower() switch
        {
            "administrator" => "Full system access and control",
            "manager" => "Team management capabilities",
            "user" => "Standard user access",
            _ => "Standard access"
        };
    }

    private string GetActivityIcon(string action)
    {
        return action.ToLower() switch
        {
            "usercreated" => "fa-user-plus",
            "userupdated" => "fa-user-edit",
            "userdeleted" => "fa-user-times",
            "userlocked" => "fa-lock",
            "userunlocked" => "fa-unlock",
            "passwordreset" => "fa-key",
            "emailconfirmationresent" => "fa-envelope",
            "emailconfirmed" => "fa-check-circle",
            "roleassigned" => "fa-user-tag",
            "roleremoved" => "fa-user-minus",
            _ => "fa-info-circle"
        };
    }

    private string GetActivityIconClass(string action)
    {
        return action.ToLower() switch
        {
            "usercreated" => "login",
            "userupdated" => "update",
            "userdeleted" => "logout",
            "userlocked" => "logout",
            "userunlocked" => "login",
            "passwordreset" => "update",
            _ => "update"
        };
    }

    private string GetTimeAgo(DateTime timestamp)
    {
        var timeSpan = DateTime.UtcNow - timestamp;
        if (timeSpan.TotalMinutes < 1) return "just now";
        if (timeSpan.TotalHours < 1) return $"{(int)timeSpan.TotalMinutes}m ago";
        if (timeSpan.TotalDays < 1) return $"{(int)timeSpan.TotalHours}h ago";
        if (timeSpan.TotalDays < 7) return $"{(int)timeSpan.TotalDays}d ago";
        return timestamp.ToString("MMM d, yyyy");
    }

    private class RoleInfo
    {
        public string Name { get; set; } = string.Empty;
    }
}