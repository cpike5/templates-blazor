@using BlazorTemplate.Configuration.Navigation
@using BlazorTemplate.Services.Navigation
@using BlazorTemplate.Services.Auth
@using BlazorTemplate.Configuration
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@inject INavigationService NavigationService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IUserRoleService RoleService
<!-- Sidebar Navigation -->
<nav class="sidebar" id="sidebar">
    @if (navigationItems != null)
    {
        @foreach (var item in navigationItems)
        {
            @if (item.IsGroup)
            {
                <div class="nav-section">
                    <div class="nav-section-title">@item.Title</div>
                    @foreach (var child in item.Children)
                    {
                        <div class="nav-item">
                            <NavLink href="@child.Href" class="nav-link" Match="@GetNavLinkMatch(child.Href)">
                                <i class="@child.Icon"></i>
                                <span class="nav-link-text">@child.Title</span>
                            </NavLink>
                        </div>
                    }
                </div>
            }
            else
            {
                <div class="nav-section">
                    <div class="nav-item">
                        <NavLink href="@item.Href" class="nav-link" Match="@GetNavLinkMatch(item.Href)">
                            <i class="@item.Icon"></i>
                            <span class="nav-link-text">@item.Title</span>
                        </NavLink>
                    </div>
                </div>
            }
        }
    }
</nav>

@code {
    private List<NavigationItem>? navigationItems;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        // var userRoles = authState.User.Claims
        //     .Where(c => c.Type == System.Security.Claims.ClaimTypes.Role)
        //     .Select(c => c.Value)
        //     .ToList();
        var user = authState.User;

        List<string> userRoles = [];


        if (user != null && user.Identity != null && user.Identity.IsAuthenticated)
        {
            var email = user.FindFirst(ClaimTypes.Email) ??
                user.FindFirst("email") ??
                user.FindFirst("preferred_username");

            var roles = await RoleService.GetUserRolesAsync(email?.Value);
            userRoles.AddRange(roles);
        }
        else
        {
            // If user is not authenticated, add "Anonymous" role
            userRoles.Add("Anonymous");
        }

        navigationItems = await NavigationService.GetNavigationItemsForUserAsync(userRoles);
    }

    private NavLinkMatch GetNavLinkMatch(string? href)
    {
        return href == "/" ? NavLinkMatch.All : NavLinkMatch.Prefix;
    }
}