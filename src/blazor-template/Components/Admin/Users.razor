@page "/admin/users"
@using BlazorTemplate.Components.Layout
@using BlazorTemplate.Data
@using BlazorTemplate.Models
@using BlazorTemplate.Services.Auth
@using Microsoft.AspNetCore.Authorization
@layout AdminLayout
@attribute [Authorize(Roles = "Administrator")]
@inject IUserManagementService UserManagementService
@inject NavigationManager Navigation

<style>
    .admin-header {
        display: flex;
        align-items: center;
        justify-content: between;
        gap: 1rem;
        margin-bottom: 2rem;
        padding-bottom: 1rem;
        border-bottom: 2px solid #e9ecef;
    }

    .admin-icon {
        width: 60px;
        height: 60px;
        border-radius: 12px;
        background: linear-gradient(135deg, var(--color-primary), var(--color-secondary));
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        font-size: 1.5rem;
        box-shadow: 0 4px 12px rgba(120, 39, 137, 0.3);
    }

    .admin-info h2 {
        margin: 0;
        font-size: 1.75rem;
        font-weight: 600;
        color: var(--color-dark);
    }

    .admin-info p {
        margin: 0.25rem 0 0 0;
        color: #6c757d;
        font-size: 1rem;
    }

    .admin-actions {
        margin-left: auto;
    }

    .stats-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 1.5rem;
        margin-bottom: 2rem;
    }

    .stat-card {
        background: white;
        border: 2px solid #e9ecef;
        border-radius: 12px;
        padding: 1.5rem;
        text-align: center;
        transition: all 0.3s ease;
    }

        .stat-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.1);
        }

    .stat-icon {
        font-size: 2rem;
        margin-bottom: 0.75rem;
    }

        .stat-icon.total {
            color: var(--color-info);
        }

        .stat-icon.active {
            color: var(--color-success);
        }

        .stat-icon.locked {
            color: var(--color-danger);
        }

        .stat-icon.pending {
            color: var(--color-warning);
        }

    .stat-value {
        font-size: 1.75rem;
        font-weight: 600;
        color: var(--color-dark);
        margin-bottom: 0.25rem;
    }

    .stat-label {
        color: #6c757d;
        font-size: 0.875rem;
        margin: 0;
    }

    .users-section {
        background: white;
        border: 2px solid #e9ecef;
        border-radius: 12px;
        overflow: hidden;
    }

    .section-header {
        background: #f8f9fa;
        padding: 1.5rem;
        border-bottom: 2px solid #e9ecef;
        display: flex;
        align-items: center;
        justify-content: space-between;
    }

    .section-title {
        font-size: 1.25rem;
        font-weight: 600;
        color: var(--color-dark);
        margin: 0;
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .search-filter-bar {
        display: flex;
        gap: 1rem;
        align-items: center;
        flex-wrap: wrap;
    }

    .search-input {
        min-width: 250px;
        padding: 0.5rem 1rem;
        border: 2px solid #e9ecef;
        border-radius: 8px;
        font-size: 0.875rem;
    }

        .search-input:focus {
            border-color: var(--color-primary);
            outline: none;
            box-shadow: 0 0 0 0.2rem rgba(120, 39, 137, 0.25);
        }

    .filter-dropdown {
        padding: 0.5rem 1rem;
        border: 2px solid #e9ecef;
        border-radius: 8px;
        background: white;
        font-size: 0.875rem;
        min-width: 120px;
    }

    .users-table {
        width: 100%;
        margin: 0;
    }

        .users-table th {
            background: #f8f9fa;
            padding: 1rem 1.5rem;
            font-weight: 600;
            color: var(--color-dark);
            border-bottom: 2px solid #e9ecef;
            white-space: nowrap;
        }

        .users-table td {
            padding: 1rem 1.5rem;
            border-bottom: 1px solid #e9ecef;
            vertical-align: middle;
        }

        .users-table tbody tr:hover {
            background-color: rgba(120, 39, 137, 0.05);
        }

    .user-avatar {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        background: linear-gradient(135deg, var(--color-primary), var(--color-secondary));
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        font-weight: 600;
        font-size: 0.875rem;
        margin-right: 0.75rem;
        flex-shrink: 0;
    }

    .user-info {
        display: flex;
        align-items: center;
    }

    .user-details h6 {
        margin: 0 0 0.25rem 0;
        font-weight: 600;
        color: var(--color-dark);
        font-size: 0.9rem;
    }

    .user-details small {
        color: #6c757d;
        font-size: 0.8rem;
    }

    .role-badges {
        display: flex;
        gap: 0.25rem;
        flex-wrap: wrap;
    }

    .role-badge {
        padding: 0.25rem 0.5rem;
        border-radius: 12px;
        font-size: 0.75rem;
        font-weight: 600;
        text-transform: uppercase;
        letter-spacing: 0.5px;
    }

        .role-badge.administrator {
            background: #f8d7da;
            color: #721c24;
        }

        .role-badge.manager {
            background: #fff3cd;
            color: #856404;
        }

        .role-badge.user {
            background: #d1ecf1;
            color: #0c5460;
        }

    .status-badge {
        padding: 0.375rem 0.75rem;
        border-radius: 16px;
        font-size: 0.75rem;
        font-weight: 600;
        text-transform: uppercase;
        letter-spacing: 0.5px;
        display: inline-flex;
        align-items: center;
        gap: 0.375rem;
    }

        .status-badge.active {
            background: #d4edda;
            color: #155724;
        }

        .status-badge.locked {
            background: #f8d7da;
            color: #721c24;
        }

        .status-badge.pending {
            background: #fff3cd;
            color: #856404;
        }

    .status-indicator {
        width: 8px;
        height: 8px;
        border-radius: 50%;
        background: currentColor;
    }

    .action-buttons {
        display: flex;
        gap: 0.5rem;
    }

    .btn-action {
        padding: 0.375rem 0.75rem;
        border: none;
        border-radius: 6px;
        font-size: 0.75rem;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.2s ease;
        text-decoration: none;
        display: inline-flex;
        align-items: center;
        gap: 0.25rem;
    }

    .btn-edit {
        background: #e3f2fd;
        color: #1976d2;
    }

        .btn-edit:hover {
            background: #bbdefb;
            color: #1565c0;
        }

    .btn-roles {
        background: #f3e5f5;
        color: #7b1fa2;
    }

        .btn-roles:hover {
            background: #e1bee7;
            color: #6a1b9a;
        }

    .btn-danger {
        background: #ffebee;
        color: #d32f2f;
    }

        .btn-danger:hover {
            background: #ffcdd2;
            color: #c62828;
        }

    .table-pagination {
        padding: 1.5rem;
        border-top: 2px solid #e9ecef;
        background: #f8f9fa;
        display: flex;
        justify-content: between;
        align-items: center;
    }

    .pagination-info {
        color: #6c757d;
        font-size: 0.875rem;
    }

    .pagination-controls {
        display: flex;
        gap: 0.5rem;
    }

    .pagination-btn {
        padding: 0.5rem 0.75rem;
        border: 1px solid #dee2e6;
        background: white;
        color: var(--color-dark);
        border-radius: 6px;
        font-size: 0.875rem;
        cursor: pointer;
        transition: all 0.2s ease;
    }

        .pagination-btn:hover:not(:disabled) {
            background: var(--color-primary);
            color: white;
            border-color: var(--color-primary);
        }

        .pagination-btn:disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }

        .pagination-btn.active {
            background: var(--color-primary);
            color: white;
            border-color: var(--color-primary);
        }

    /* Mobile responsive */
    @@media (max-width: 768px) {
        .admin-header

    {
        flex-direction: column;
        text-align: center;
    }

    .admin-actions {
        margin-left: 0;
    }

    .section-header {
        flex-direction: column;
        gap: 1rem;
        align-items: stretch;
    }

    .search-filter-bar {
        flex-direction: column;
    }

    .search-input {
        min-width: auto;
        width: 100%;
    }

    .users-table {
        font-size: 0.8rem;
    }

        .users-table td {
            padding: 0.75rem 0.5rem;
        }

    .action-buttons {
        flex-direction: column;
    }

    }
</style>

<!-- Page Header -->
<div class="admin-header">
    <div class="admin-icon">
        <i class="fas fa-users-cog"></i>
    </div>
    <div class="admin-info">
        <h2>User Management</h2>
        <p>Manage user accounts, roles, and permissions</p>
    </div>
    <div class="admin-actions">
        <button class="btn btn-primary">
            <i class="fas fa-user-plus me-2"></i>
            Add New User
        </button>
    </div>
</div>

<!-- Statistics Cards -->
<div class="stats-grid">
    <div class="stat-card">
        <div class="stat-icon total">
            <i class="fas fa-users"></i>
        </div>
        <div class="stat-value">@(userStats?.TotalUsers ?? 0)</div>
        <p class="stat-label">Total Users</p>
    </div>
    <div class="stat-card">
        <div class="stat-icon active">
            <i class="fas fa-user-check"></i>
        </div>
        <div class="stat-value">@(userStats?.ActiveUsers ?? 0)</div>
        <p class="stat-label">Active Users</p>
    </div>
    <div class="stat-card">
        <div class="stat-icon locked">
            <i class="fas fa-user-lock"></i>
        </div>
        <div class="stat-value">@(userStats?.LockedUsers ?? 0)</div>
        <p class="stat-label">Locked Users</p>
    </div>
    <div class="stat-card">
        <div class="stat-icon pending">
            <i class="fas fa-user-clock"></i>
        </div>
        <div class="stat-value">@(userStats?.PendingUsers ?? 0)</div>
        <p class="stat-label">Pending Verification</p>
    </div>
</div>

<!-- Users Table Section -->
<div class="users-section">
    <div class="section-header">
        <h3 class="section-title">
            <i class="fas fa-list me-2"></i>
            All Users
        </h3>
        <div class="search-filter-bar">
            <input type="text" class="search-input" placeholder="Search users by name or email..." @bind="searchTerm" @onkeypress="OnSearchKeyPress" />
            <select class="filter-dropdown" @bind="selectedRole">
                <option value="">All Roles</option>
                <option value="Administrator">Administrator</option>
                <option value="Manager">Manager</option>
                <option value="User">User</option>
            </select>
            <select class="filter-dropdown" @bind="selectedStatus">
                <option value="">All Status</option>
                <option value="active">Active</option>
                <option value="locked">Locked</option>
                <option value="pending">Pending</option>
            </select>
            <button class="btn btn-primary btn-sm" @onclick="SearchUsers">
                <i class="fas fa-search"></i>
                Search
            </button>
        </div>
    </div>

    <table class="users-table">
        <thead>
            <tr>
                <th>User</th>
                <th>Roles</th>
                <th>Status</th>
                <th>Last Login</th>
                <th>Created</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @if (isLoading)
            {
                <tr>
                    <td colspan="6" class="text-center py-4">
                        <i class="fas fa-spinner fa-spin me-2"></i>
                        Loading users...
                    </td>
                </tr>
            }
            else if (usersResult?.Items?.Any() == true)
            {
                @foreach (var user in usersResult.Items)
                {
                    <tr>
                        <td>
                            <div class="user-info">
                                <div class="user-avatar">@GetUserInitials(user.UserName ?? user.Email)</div>
                                <div class="user-details">
                                    <h6>@(user.UserName ?? user.Email)</h6>
                                    <small>@user.Email</small>
                                </div>
                            </div>
                        </td>
                        <td>
                            <div class="role-badges">
                                @foreach (var role in user.Roles)
                                {
                                    <span class="role-badge @role.ToLower()">@role</span>
                                }
                            </div>
                        </td>
                        <td>
                            <span class="status-badge @GetUserStatusClass(user)">
                                <span class="status-indicator"></span>
                                @GetUserStatus(user)
                            </span>
                        </td>
                        <td>
                            <small>Never</small>
                        </td>
                        <td>
                            <small>@user.CreatedAt.ToString("MMM d, yyyy")<br />@user.CreatedAt.ToString("h:mm tt")</small>
                        </td>
                        <td>
                            <div class="action-buttons">
                                <button class="btn-action btn-edit" @onclick="() => EditUser(user.Id)">
                                    <i class="fas fa-edit"></i>
                                    Edit
                                </button>
                                @if (IsUserLocked(user))
                                {
                                    <button class="btn-action btn-danger" @onclick="() => UnlockUser(user.Id)">
                                        <i class="fas fa-unlock"></i>
                                        Unlock
                                    </button>
                                }
                                else
                                {
                                    <button class="btn-action btn-danger" @onclick="() => LockUser(user.Id)">
                                        <i class="fas fa-lock"></i>
                                        Lock
                                    </button>
                                }
                                @if (!user.EmailConfirmed)
                                {
                                    <button class="btn-action btn-danger" @onclick="() => ResendConfirmation(user.Id)">
                                        <i class="fas fa-paper-plane"></i>
                                        Resend
                                    </button>
                                }
                            </div>
                        </td>
                    </tr>
                }
            }
            else
            {
                <tr>
                    <td colspan="6" class="text-center py-4">
                        <i class="fas fa-users me-2"></i>
                        No users found.
                    </td>
                </tr>
            }
        </tbody>
    </table>

    @if (usersResult != null && usersResult.TotalCount > 0)
    {
        <div class="table-pagination">
            <div class="pagination-info">
                Showing @((currentPage - 1) * pageSize + 1)-@(Math.Min(currentPage * pageSize, usersResult.TotalCount)) of @usersResult.TotalCount users
            </div>
            <div class="pagination-controls">
                <button class="pagination-btn" @onclick="PreviousPage" disabled="@(currentPage <= 1)">
                    <i class="fas fa-chevron-left"></i>
                </button>
                @for (int i = Math.Max(1, currentPage - 2); i <= Math.Min(totalPages, currentPage + 2); i++)
                {
                    <button class="pagination-btn @(i == currentPage ? "active" : "")" @onclick="() => GoToPage(i)">
                        @i
                    </button>
                }
                <button class="pagination-btn" @onclick="NextPage" disabled="@(currentPage >= totalPages)">
                    <i class="fas fa-chevron-right"></i>
                </button>
            </div>
        </div>
    }
</div>

@code {
    private UserStatsDto? userStats;
    private PagedResult<UserDto>? usersResult;
    private bool isLoading = true;
    private string searchTerm = string.Empty;
    private string selectedRole = string.Empty;
    private string selectedStatus = string.Empty;
    private int currentPage = 1;
    private int pageSize = 10;
    private int totalPages => usersResult != null ? (int)Math.Ceiling((double)usersResult.TotalCount / pageSize) : 1;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        isLoading = true;
        StateHasChanged();

        try
        {
            // Load user statistics
            userStats = await UserManagementService.GetUserStatisticsAsync();

            // Load users
            await LoadUsers();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading data: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task LoadUsers()
    {
        var searchCriteria = new UserSearchCriteria
        {
            Email = searchTerm,
            UserName = searchTerm,
            PageNumber = currentPage,
            PageSize = pageSize,
            SortBy = "email",
            SortDescending = false
        };

        // Apply status filter
        if (!string.IsNullOrEmpty(selectedStatus))
        {
            switch (selectedStatus.ToLower())
            {
                case "active":
                    searchCriteria.EmailConfirmed = true;
                    searchCriteria.IsLockedOut = false;
                    break;
                case "locked":
                    searchCriteria.IsLockedOut = true;
                    break;
                case "pending":
                    searchCriteria.EmailConfirmed = false;
                    break;
            }
        }

        usersResult = await UserManagementService.GetUsersAsync(searchCriteria);
    }

    private async Task SearchUsers()
    {
        currentPage = 1;
        await LoadUsers();
    }

    private async Task OnSearchKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SearchUsers();
        }
    }

    private async Task GoToPage(int page)
    {
        if (page != currentPage && page >= 1 && page <= totalPages)
        {
            currentPage = page;
            await LoadUsers();
        }
    }

    private async Task PreviousPage()
    {
        if (currentPage > 1)
        {
            currentPage--;
            await LoadUsers();
        }
    }

    private async Task NextPage()
    {
        if (currentPage < totalPages)
        {
            currentPage++;
            await LoadUsers();
        }
    }

    private void EditUser(string userId)
    {
        Navigation.NavigateTo($"/admin/users/{userId}");
    }

    private async Task LockUser(string userId)
    {
        try
        {
            var result = await UserManagementService.LockUserAsync(userId);
            if (result.Succeeded)
            {
                await LoadUsers();
                await LoadUserStats();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error locking user: {ex.Message}");
        }
    }

    private async Task UnlockUser(string userId)
    {
        try
        {
            var result = await UserManagementService.UnlockUserAsync(userId);
            if (result.Succeeded)
            {
                await LoadUsers();
                await LoadUserStats();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error unlocking user: {ex.Message}");
        }
    }

    private async Task ResendConfirmation(string userId)
    {
        try
        {
            var result = await UserManagementService.ResendEmailConfirmationAsync(userId);
            if (result.Succeeded)
            {
                // Could show a success message here
                Console.WriteLine("Email confirmation resent successfully");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error resending confirmation: {ex.Message}");
        }
    }

    private async Task LoadUserStats()
    {
        userStats = await UserManagementService.GetUserStatisticsAsync();
        StateHasChanged();
    }

    private string GetUserInitials(string name)
    {
        if (string.IsNullOrEmpty(name))
            return "?";

        var parts = name.Split('@')[0].Split('.');
        if (parts.Length >= 2)
        {
            return $"{parts[0][0]}{parts[1][0]}".ToUpper();
        }
        
        return name.Length >= 2 ? name.Substring(0, 2).ToUpper() : name.ToUpper();
    }

    private string GetUserStatus(UserDto user)
    {
        if (IsUserLocked(user))
            return "Locked";
        if (!user.EmailConfirmed)
            return "Pending";
        return "Active";
    }

    private string GetUserStatusClass(UserDto user)
    {
        if (IsUserLocked(user))
            return "locked";
        if (!user.EmailConfirmed)
            return "pending";
        return "active";
    }

    private bool IsUserLocked(UserDto user)
    {
        return user.LockoutEnd.HasValue && user.LockoutEnd > DateTimeOffset.UtcNow;
    }
}