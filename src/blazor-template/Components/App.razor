@using BlazorTemplate.Services.UI
@inject IConfiguration Configuration
@inject ThemeService ThemeService

<!DOCTYPE html>
<html lang="en" class="@ThemeClasses">

<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <base href="/" />
    <title>@ApplicationTitle</title>

    <!-- Theme initialization script - load early to prevent flash -->
    <script src="js/theme.js"></script>
    
    <!-- Core CSS Dependencies -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all.min.css" rel="stylesheet">
    <link rel="stylesheet" href="app.css" />
    <link rel="stylesheet" href="color-schemes.css" />
    <link rel="stylesheet" href="blazor-template.styles.css" />
    <HeadOutlet />
</head>

<body>
    <Routes />

    <!-- Core JS Dependencies -->
    <script src="https://code.jquery.com/jquery-3.7.1.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
    <script src="_framework/blazor.web.js"></script>

    <script>
        window.blazorLayout = {
            init: function() {
                $(document).ready(function() {
                    // Mobile sidebar toggle
                    $('#sidebarToggle').on('click', function() {
                        $('#sidebar').toggleClass('show');
                        $('#sidebarOverlay').toggleClass('show');
                        $('body').toggleClass('sidebar-open');
                    });

                    // Close sidebar when clicking overlay
                    $('#sidebarOverlay').on('click', function() {
                        $('#sidebar').removeClass('show');
                        $('#sidebarOverlay').removeClass('show');
                        $('body').removeClass('sidebar-open');
                    });

                    // Handle navigation link clicks
                    $('.nav-link').on('click', function(e) {
                        // Remove active class from all navigation links
                        $('.nav-link').removeClass('active');

                        // Add active class to clicked link
                        $(this).addClass('active');

                        // Close mobile sidebar if open
                        if ($(window).width() <= 768) {
                            $('#sidebar').removeClass('show');
                            $('#sidebarOverlay').removeClass('show');
                            $('body').removeClass('sidebar-open');
                        }
                    });

                    // Handle window resize - close mobile sidebar on desktop view
                    $(window).on('resize', function() {
                        if ($(window).width() > 768) {
                            $('#sidebar').removeClass('show');
                            $('#sidebarOverlay').removeClass('show');
                            $('body').removeClass('sidebar-open');
                        }
                    });
                });
            }
        };

        // Initialize when DOM is loaded
        window.blazorLayout.init();
    </script>
</body>

</html>

@code {
    public string ApplicationTitle { get; set; } = "";
    public string ColorScheme { get; set; } = "";
    public string ThemeClasses { get; set; } = "";

    protected override async Task OnInitializedAsync()
    {
        ApplicationTitle = Configuration["Site:Title"] ?? "Blazor Template";
        ColorScheme = Configuration["ColorScheme"] ?? "";
        
        // Initialize theme service and get server-side theme classes
        await ThemeService.EnsureInitializedAsync();
        ThemeClasses = GetThemeClasses();
    }
    
    private string GetThemeClasses()
    {
        var classes = new List<string>();
        
        // Add color scheme if specified in config
        if (!string.IsNullOrEmpty(ColorScheme))
        {
            classes.Add(ColorScheme);
        }
        
        // Use the ThemeService's method to get proper theme classes
        var themeClasses = ThemeService.GetThemeClassForRendering();
        if (!string.IsNullOrEmpty(themeClasses))
        {
            classes.Add(themeClasses);
        }
        
        return string.Join(" ", classes);
    }
}