@using BlazorTemplate
@using BlazorTemplate.Components
@using BlazorTemplate.Data
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.JwtBearer
@using Microsoft.AspNetCore.Identity

@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityRedirectManager RedirectManager

<style>
    .oauth-buttons {
        display: flex;
        flex-direction: column;
        gap: 12px;
        width: 100%;
    }

    .oauth-button {
        display: flex;
        align-items: center;
        justify-content: center;
        padding: 14px 16px;
        border: 1px solid #dadce0;
        border-radius: 8px;
        background-color: white;
        color: #3c4043;
        font-family: 'Roboto', -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
        font-size: 16px;
        font-weight: 600;
        text-decoration: none;
        transition: all 0.2s ease;
        cursor: pointer;
        width: 100%;
        min-height: 48px;
        position: relative;
    }

    .oauth-button:hover {
        background-color: #f8f9fa;
        border-color: #c6c6c6;
        box-shadow: 0 1px 3px rgba(60, 64, 67, 0.12);
        color: #3c4043;
    }

    .oauth-button:active {
        background-color: #f1f3f4;
        transform: translateY(1px);
    }

    .oauth-icon {
        width: 20px;
        height: 20px;
        position: absolute;
        left: 16px;
        flex-shrink: 0;
    }

    .oauth-text {
        text-align: center;
        width: 100%;
        font-weight: 600;
    }

    /* Provider-specific styling */
    .oauth-button.google {
        border-color: #dadce0;
    }

    .oauth-button.microsoft {
        border-color: #8c8c8c;
    }

    .oauth-button.facebook {
        border-color: #ddd;
    }

    .oauth-button.linkedin {
        border-color: #ddd;
    }

    @@media (max-width: 768px) {
        .oauth-buttons {
            gap: 10px;
        }
        
        .oauth-button {
            padding: 12px 14px;
            font-size: 13px;
        }
        
        .oauth-icon {
            width: 18px;
            height: 18px;
            margin-right: 12px;
        }
    }
</style>

@if (externalLogins.Length == 0)
{
    <div>
        <p>
            There are no external authentication services configured. See this <a href="https://go.microsoft.com/fwlink/?LinkID=532715">article
            about setting up this ASP.NET application to support logging in via external services</a>.
        </p>
    </div>
}
else
{
    <form action="Account/PerformExternalLogin" method="post">
        <AntiforgeryToken />
        <input type="hidden" name="ReturnUrl" value="@ReturnUrl" />
        
        <div class="oauth-buttons">
            @foreach (var provider in externalLogins)
            {
                <button type="submit" 
                        class="oauth-button @GetProviderClass(provider.Name)" 
                        name="provider" 
                        value="@provider.Name" 
                        title="Log in using your @provider.DisplayName account">
                    @GetProviderIcon(provider.Name)
                    <span class="oauth-text">@provider.DisplayName</span>
                </button>
            }
        </div>
    </form>
}

@code {
    private AuthenticationScheme[] externalLogins = [];

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var schemes = await SignInManager.GetExternalAuthenticationSchemesAsync();
        // Filter out JWT schemes to hide them from UI
        externalLogins = schemes.Where(x => x.Name != JwtBearerDefaults.AuthenticationScheme && x.Name != "JWT_OR_COOKIE").ToArray();
    }

    private string GetProviderClass(string providerName)
    {
        return providerName.ToLower() switch
        {
            "google" => "google",
            "microsoft" => "microsoft", 
            "facebook" => "facebook",
            "linkedin" => "linkedin",
            _ => "default"
        };
    }

    private MarkupString GetProviderIcon(string providerName)
    {
        var svg = providerName.ToLower() switch
        {
            "google" => @"<svg class='oauth-icon' viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg'>
                            <path fill='#4285F4' d='M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z'/>
                            <path fill='#34A853' d='M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z'/>
                            <path fill='#FBBC05' d='M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z'/>
                            <path fill='#EA4335' d='M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z'/>
                        </svg>",
            
            "microsoft" => @"<svg class='oauth-icon' viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg'>
                               <path fill='#f25022' d='M1 1h10v10H1z'/>
                               <path fill='#00a4ef' d='M13 1h10v10H13z'/>
                               <path fill='#7fba00' d='M1 13h10v10H1z'/>
                               <path fill='#ffb900' d='M13 13h10v10H13z'/>
                           </svg>",
            
            "facebook" => @"<svg class='oauth-icon' viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg'>
                               <path fill='#1877F2' d='M24 12.073c0-6.627-5.373-12-12-12s-12 5.373-12 12c0 5.99 4.388 10.954 10.125 11.854v-8.385H7.078v-3.47h3.047V9.43c0-3.007 1.792-4.669 4.533-4.669 1.312 0 2.686.235 2.686.235v2.953H15.83c-1.491 0-1.956.925-1.956 1.874v2.25h3.328l-.532 3.47h-2.796v8.385C19.612 23.027 24 18.062 24 12.073z'/>
                           </svg>",
            
            "linkedin" => @"<svg class='oauth-icon' viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg'>
                               <path fill='#0077b5' d='M20.447 20.452h-3.554v-5.569c0-1.328-.027-3.037-1.852-3.037-1.853 0-2.136 1.445-2.136 2.939v5.667H9.351V9h3.414v1.561h.046c.477-.9 1.637-1.85 3.37-1.85 3.601 0 4.267 2.37 4.267 5.455v6.286zM5.337 7.433c-1.144 0-2.063-.926-2.063-2.065 0-1.138.92-2.063 2.063-2.063 1.14 0 2.064.925 2.064 2.063 0 1.139-.925 2.065-2.064 2.065zm1.782 13.019H3.555V9h3.564v11.452zM22.225 0H1.771C.792 0 0 .774 0 1.729v20.542C0 23.227.792 24 1.771 24h20.451C23.2 24 24 23.227 24 22.271V1.729C24 .774 23.2 0 22.222 0h.003z'/>
                           </svg>",
            
            _ => @"<svg class='oauth-icon' viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg'>
                      <path fill='#666' d='M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z'/>
                  </svg>"
        };
        
        return new MarkupString(svg);
    }
}
