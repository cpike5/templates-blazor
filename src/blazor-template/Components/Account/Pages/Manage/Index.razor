@page "/Account/Manage"

@using System.ComponentModel.DataAnnotations
@using BlazorTemplate
@using BlazorTemplate.Components
@using BlazorTemplate.Components.Account.Shared
@using BlazorTemplate.Data
@using BlazorTemplate.Services.UI
@using BlazorTemplate.Services.Auth
@using BlazorTemplate.Components.Shared
@using Microsoft.AspNetCore.Identity

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager
@inject IUserRoleService UserRoleService

<PageTitle>Profile</PageTitle>

<style>
    .profile-header {
        display: flex;
        align-items: center;
        gap: 1rem;
        margin-bottom: 2rem;
    }

    .profile-avatar {
        width: 80px;
        height: 80px;
        border-radius: 50%;
        background: linear-gradient(135deg, var(--color-primary), var(--color-secondary));
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        font-size: 2rem;
        font-weight: 600;
        flex-shrink: 0;
        box-shadow: 0 4px 12px rgba(120, 39, 137, 0.3);
    }

    .profile-info h2 {
        margin: 0;
        font-size: 1.75rem;
        font-weight: 600;
        color: var(--color-dark);
    }

    .profile-info p {
        margin: 0.25rem 0 0 0;
        color: #6c757d;
        font-size: 1rem;
    }

    .profile-stats {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 1.5rem;
        margin-bottom: 2rem;
    }

    .stat-card {
        background: linear-gradient(135deg, #f8f9fa, #e9ecef);
        border: 2px solid #dee2e6;
        border-radius: 12px;
        padding: 1.5rem;
        text-align: center;
        transition: all 0.3s ease;
    }

        .stat-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
        }

    .stat-icon {
        font-size: 2rem;
        color: var(--color-primary);
        margin-bottom: 0.5rem;
    }

    .stat-value {
        font-size: 1.5rem;
        font-weight: 600;
        color: var(--color-dark);
        margin-bottom: 0.25rem;
    }

    .stat-label {
        color: #6c757d;
        font-size: 0.875rem;
        margin: 0;
    }

    .profile-sections {
        display: grid;
        gap: 2rem;
    }

    .profile-section {
        background: white;
        border: 2px solid #e9ecef;
        border-radius: 12px;
        padding: 2rem;
        transition: all 0.3s ease;
    }

        .profile-section:hover {
            border-color: var(--color-primary);
            box-shadow: 0 4px 12px rgba(120, 39, 137, 0.1);
        }

    .section-header {
        display: flex;
        align-items: center;
        gap: 1rem;
        margin-bottom: 1.5rem;
        padding-bottom: 1rem;
        border-bottom: 2px solid #e9ecef;
    }

    .section-icon {
        width: 40px;
        height: 40px;
        border-radius: 8px;
        background: linear-gradient(135deg, var(--color-primary), var(--color-secondary));
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        font-size: 1.2rem;
    }

    .section-title {
        font-size: 1.25rem;
        font-weight: 600;
        color: var(--color-dark);
        margin: 0;
    }

    .section-description {
        color: #6c757d;
        font-size: 0.9rem;
        margin: 0.25rem 0 0 0;
    }

    .form-row {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 1.5rem;
        margin-bottom: 1.5rem;
    }

    .form-group {
        margin-bottom: 1.5rem;
    }

    .readonly-field {
        background: #f8f9fa;
        position: relative;
    }

        .readonly-field::after {
            content: '\f023';
            font-family: 'Font Awesome 6 Free';
            font-weight: 900;
            position: absolute;
            right: 1rem;
            top: 50%;
            transform: translateY(-50%);
            color: #6c757d;
            font-size: 0.875rem;
        }

    .field-help {
        font-size: 0.875rem;
        color: #6c757d;
        margin-top: 0.5rem;
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

        .field-help i {
            color: var(--color-info);
        }

    .save-section {
        background: linear-gradient(135deg, #f8f9fa, #e9ecef);
        border: 2px solid #dee2e6;
        border-radius: 12px;
        padding: 1.5rem;
        text-align: center;
        margin-top: 2rem;
    }

    .save-actions {
        display: flex;
        gap: 1rem;
        justify-content: center;
        flex-wrap: wrap;
    }

    /* Mobile Responsive */
    @@media (max-width: 768px) {
        .profile-header

    {
        text-align: center;
        flex-direction: column;
    }

    .profile-avatar {
        width: 100px;
        height: 100px;
        font-size: 2.5rem;
    }

    .profile-stats {
        grid-template-columns: 1fr;
    }

    .form-row {
        grid-template-columns: 1fr;
        gap: 1rem;
    }

    .save-actions {
        flex-direction: column;
    }

        .save-actions .btn {
            width: 100%;
        }

    }

    /* Loading State */
    .saving-state {
        opacity: 0.7;
        pointer-events: none;
    }

    .saving-overlay {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(255, 255, 255, 0.8);
        display: flex;
        align-items: center;
        justify-content: center;
        border-radius: 12px;
        z-index: 10;
    }

    .spinner {
        width: 2rem;
        height: 2rem;
        border: 3px solid #e9ecef;
        border-top: 3px solid var(--color-primary);
        border-radius: 50%;
        animation: spin 1s linear infinite;
    }

    @@keyframes spin {
        0% {
            transform: rotate(0deg);
        }
        100% {
            transform: rotate(360deg);
        }
    }

    /* Role Badges */
    .roles-container {
        display: flex;
        flex-wrap: wrap;
        gap: 0.75rem;
    }

    .role-badge {
        background: linear-gradient(135deg, var(--color-primary), var(--color-secondary));
        color: white;
        padding: 0.5rem 1rem;
        border-radius: 20px;
        font-size: 0.875rem;
        font-weight: 500;
        display: inline-flex;
        align-items: center;
        box-shadow: 0 2px 4px rgba(120, 39, 137, 0.2);
        transition: transform 0.2s ease;
    }

    .role-badge:hover {
        transform: translateY(-1px);
        box-shadow: 0 4px 8px rgba(120, 39, 137, 0.3);
    }

    .no-roles {
        background: #f8f9fa;
        border: 2px dashed #dee2e6;
        border-radius: 8px;
        padding: 1.5rem;
        text-align: center;
        color: #6c757d;
        font-style: italic;
    }

    .theme-switcher-container {
        display: flex;
        align-items: center;
        justify-content: flex-start;
        padding: 0.5rem;
        background: #f8f9fa;
        border: 2px solid #dee2e6;
        border-radius: 12px;
    }

    /* Account Details */
    .account-details {
        display: grid;
        gap: 1rem;
    }

    .detail-row {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 0.75rem;
        background: #f8f9fa;
        border-radius: 8px;
        border-left: 4px solid var(--color-primary);
    }

    .detail-label {
        font-weight: 600;
        color: var(--color-dark);
    }

    .detail-value {
        display: flex;
        align-items: center;
        font-weight: 500;
    }

    .text-success {
        color: #28a745 !important;
    }

    .text-danger {
        color: #dc3545 !important;
    }

    .text-warning {
        color: #ffc107 !important;
    }
</style>

<!-- Profile Header -->
<div class="profile-header">
    <div class="profile-avatar">
        @GetUserInitials()
    </div>
    <div class="profile-info">
        <h2>@GetDisplayName()</h2>
        <p>@username</p>
    </div>
</div>

<!-- Status Message -->
<StatusMessage />

<!-- Profile Statistics -->
<div class="profile-stats">
    <div class="stat-card">
        <div class="stat-icon">
            <i class="fas fa-calendar-check"></i>
        </div>
        <div class="stat-value">@GetMemberSince()</div>
        <p class="stat-label">Member Since</p>
    </div>

    <div class="stat-card">
        <div class="stat-icon">
            <i class="fas fa-shield-alt"></i>
        </div>
        <div class="stat-value">@GetAccountStatus()</div>
        <p class="stat-label">Account Status</p>
    </div>

    <div class="stat-card">
        <div class="stat-icon">
            <i class="fas fa-envelope-circle-check"></i>
        </div>
        <div class="stat-value">@GetEmailStatus()</div>
        <p class="stat-label">Email Status</p>
    </div>

    <div class="stat-card">
        <div class="stat-icon">
            <i class="fas fa-user-tag"></i>
        </div>
        <div class="stat-value">@userRoles.Count()</div>
        <p class="stat-label">User Roles</p>
    </div>

    <div class="stat-card">
        <div class="stat-icon">
            <i class="fas fa-mobile-alt"></i>
        </div>
        <div class="stat-value">@GetTwoFactorStatus()</div>
        <p class="stat-label">2FA Status</p>
    </div>
</div>

<!-- Profile Sections -->
<div class="profile-sections">
    <!-- Personal Information Section -->
    <div class="profile-section" @attributes="@(isSaving ? new Dictionary<string, object> { { "class", "profile-section saving-state" } } : null)">
        @if (isSaving)
        {
            <div class="saving-overlay">
                <div class="spinner"></div>
            </div>
        }

        <div class="section-header">
            <div class="section-icon">
                <i class="fas fa-user-edit"></i>
            </div>
            <div>
                <h3 class="section-title">Personal Information</h3>
                <p class="section-description">Update your personal details and contact information</p>
            </div>
        </div>

        <EditForm Model="Input" FormName="profile" OnValidSubmit="OnValidSubmitAsync" method="post">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />

            <div class="form-row">
                <div class="form-group">
                    <div class="form-floating">
                        <input type="text" value="@username" class="form-control readonly-field" placeholder="Username" disabled />
                        <label>Username</label>
                    </div>
                    <div class="field-help">
                        <i class="fas fa-info-circle"></i>
                        <span>Username cannot be changed after registration</span>
                    </div>
                </div>

                <div class="form-group">
                    <div class="form-floating">
                        <input type="email" value="@(user?.Email ?? "")" class="form-control readonly-field" placeholder="Email Address" disabled />
                        <label>Email Address</label>
                    </div>
                    <div class="field-help">
                        <i class="fas fa-external-link-alt"></i>
                        <span><a href="Account/Manage/Email">Change email address</a></span>
                    </div>
                </div>
            </div>

            <div class="form-group">
                <div class="form-floating">
                    <InputText @bind-Value="Input.PhoneNumber" class="form-control" placeholder="Phone number" />
                    <label for="phone-number">Phone Number</label>
                    <ValidationMessage For="() => Input.PhoneNumber" class="validation-message" />
                </div>
                <div class="field-help">
                    <i class="fas fa-phone"></i>
                    <span>Used for account recovery and two-factor authentication</span>
                </div>
            </div>

            <div class="save-section">
                <p style="margin-bottom: 1rem; color: #6c757d;">
                    <i class="fas fa-save"></i>
                    Ready to save your changes?
                </p>
                <div class="save-actions">
                    <button type="submit" class="btn btn-primary" disabled="@isSaving">
                        @if (isSaving)
                        {
                            <i class="fas fa-spinner fa-spin me-2"></i>
                            <span>Saving Changes...</span>
                        }
                        else
                        {
                            <i class="fas fa-save me-2"></i>
                            <span>Save Changes</span>
                        }
                    </button>
                    <button type="button" class="btn btn-secondary" @onclick="ResetForm" disabled="@isSaving">
                        <i class="fas fa-undo me-2"></i>
                        Reset
                    </button>
                </div>
            </div>
        </EditForm>
    </div>

    <!-- Quick Actions Section -->
    <div class="profile-section">
        <div class="section-header">
            <div class="section-icon">
                <i class="fas fa-bolt"></i>
            </div>
            <div>
                <h3 class="section-title">Quick Actions</h3>
                <p class="section-description">Common account management tasks</p>
            </div>
        </div>

        <div class="form-row">
            <a href="Account/Manage/ChangePassword" class="btn btn-outline-primary">
                <i class="fas fa-key me-2"></i>
                Change Password
            </a>
            <a href="Account/Manage/TwoFactorAuthentication" class="btn btn-outline-primary">
                <i class="fas fa-shield-alt me-2"></i>
                Security Settings
            </a>
        </div>

        <div class="form-row">
            <a href="Account/Manage/PersonalData" class="btn btn-outline-primary">
                <i class="fas fa-download me-2"></i>
                Download Data
            </a>
            <a href="Account/Manage/Email" class="btn btn-outline-primary">
                <i class="fas fa-envelope me-2"></i>
                Email Settings
            </a>
        </div>

        <div class="form-row">
            <div class="theme-switcher-container">
                <ThemeSwitcher />
            </div>
        </div>
    </div>

    <!-- User Roles Section -->
    <div class="profile-section">
        <div class="section-header">
            <div class="section-icon">
                <i class="fas fa-user-tag"></i>
            </div>
            <div>
                <h3 class="section-title">User Roles</h3>
                <p class="section-description">Your assigned roles and permissions</p>
            </div>
        </div>

        @if (userRoles.Any())
        {
            <div class="roles-container">
                @foreach (var role in userRoles)
                {
                    <span class="role-badge">
                        <i class="fas fa-tag me-1"></i>
                        @role
                    </span>
                }
            </div>
        }
        else
        {
            <div class="no-roles">
                <i class="fas fa-info-circle me-2"></i>
                <span>No roles assigned to your account</span>
            </div>
        }
    </div>

    <!-- Account Details Section -->
    <div class="profile-section">
        <div class="section-header">
            <div class="section-icon">
                <i class="fas fa-info-circle"></i>
            </div>
            <div>
                <h3 class="section-title">Account Details</h3>
                <p class="section-description">View your account information and status</p>
            </div>
        </div>

        <div class="account-details">
            <div class="detail-row">
                <span class="detail-label">Account Created:</span>
                <span class="detail-value">@GetMemberSinceDetailed()</span>
            </div>
            <div class="detail-row">
                <span class="detail-label">Email Confirmed:</span>
                <span class="detail-value">
                    @if (user?.EmailConfirmed == true)
                    {
                        <i class="fas fa-check-circle text-success me-1"></i><span>Yes</span>
                    }
                    else
                    {
                        <i class="fas fa-times-circle text-danger me-1"></i><span>No</span>
                    }
                </span>
            </div>
            <div class="detail-row">
                <span class="detail-label">Phone Confirmed:</span>
                <span class="detail-value">
                    @if (user?.PhoneNumberConfirmed == true)
                    {
                        <i class="fas fa-check-circle text-success me-1"></i><span>Yes</span>
                    }
                    else
                    {
                        <i class="fas fa-times-circle text-danger me-1"></i><span>No</span>
                    }
                </span>
            </div>
            <div class="detail-row">
                <span class="detail-label">Two-Factor Auth:</span>
                <span class="detail-value">
                    @if (user?.TwoFactorEnabled == true)
                    {
                        <i class="fas fa-shield-alt text-success me-1"></i><span>Enabled</span>
                    }
                    else
                    {
                        <i class="fas fa-shield text-warning me-1"></i><span>Disabled</span>
                    }
                </span>
            </div>
            <div class="detail-row">
                <span class="detail-label">Account Locked:</span>
                <span class="detail-value">
                    @if (user?.LockoutEnd != null && user.LockoutEnd > DateTimeOffset.UtcNow)
                    {
                        <i class="fas fa-lock text-danger me-1"></i><span>Yes (until @user.LockoutEnd.Value.ToString("g"))</span>
                    }
                    else
                    {
                        <i class="fas fa-unlock text-success me-1"></i><span>No</span>
                    }
                </span>
            </div>
        </div>
    </div>
</div>

@code {
    private ApplicationUser user = default!;
    private string? username;
    private string? phoneNumber;
    private bool isSaving = false;
    private IEnumerable<string> userRoles = new List<string>();

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        username = await UserManager.GetUserNameAsync(user);
        phoneNumber = await UserManager.GetPhoneNumberAsync(user);
        userRoles = await UserRoleService.GetUserRolesAsync(user.Email);

        Input.PhoneNumber ??= phoneNumber;
    }

    private async Task OnValidSubmitAsync()
    {
        isSaving = true;
        StateHasChanged();

        try
        {
            if (Input.PhoneNumber != phoneNumber)
            {
                var setPhoneResult = await UserManager.SetPhoneNumberAsync(user, Input.PhoneNumber);
                if (!setPhoneResult.Succeeded)
                {
                    RedirectManager.RedirectToCurrentPageWithStatus("Error: Failed to set phone number.", HttpContext);
                    return;
                }
            }

            await SignInManager.RefreshSignInAsync(user);

            // Simulate a brief delay for better UX
            await Task.Delay(1000);

            RedirectManager.RedirectToCurrentPageWithStatus("Your profile has been updated successfully!", HttpContext);
        }
        finally
        {
            isSaving = false;
            StateHasChanged();
        }
    }

    private void ResetForm()
    {
        Input.PhoneNumber = phoneNumber;
        StateHasChanged();
    }

    private string GetUserInitials()
    {
        if (!string.IsNullOrEmpty(username))
        {
            var parts = username.Split('@')[0].Split('.', '-', '_');
            if (parts.Length >= 2)
            {
                return $"{parts[0][0]}{parts[1][0]}".ToUpper();
            }
            return username[0].ToString().ToUpper();
        }
        return "U";
    }

    private string GetDisplayName()
    {
        if (!string.IsNullOrEmpty(username))
        {
            return username.Split('@')[0].Replace('.', ' ').Replace('-', ' ').Replace('_', ' ')
                .Split(' ').Select(word => char.ToUpper(word[0]) + word.Substring(1)).Aggregate((a, b) => a + " " + b);
        }
        return "User";
    }

    private string GetMemberSince()
    {
        // Use SecurityStamp creation as a proxy for account creation date
        // In a real app, you'd have a CreatedDate field
        return DateTime.Now.Year.ToString();
    }

    private string GetMemberSinceDetailed()
    {
        // For demo purposes, showing a more detailed date
        // In production, this would come from user.CreatedDate or similar
        var approximateDate = DateTime.Now.AddDays(-new Random().Next(30, 365));
        return approximateDate.ToString("MMMM dd, yyyy");
    }

    private string GetAccountStatus()
    {
        if (user?.LockoutEnd != null && user.LockoutEnd > DateTimeOffset.UtcNow)
            return "Locked";
        
        return user?.EmailConfirmed == true ? "Active" : "Pending";
    }

    private string GetEmailStatus()
    {
        return user?.EmailConfirmed == true ? "Verified" : "Unverified";
    }

    private string GetTwoFactorStatus()
    {
        return user?.TwoFactorEnabled == true ? "Enabled" : "Disabled";
    }

    private sealed class InputModel
    {
        [Phone]
        [Display(Name = "Phone number")]
        public string? PhoneNumber { get; set; }
    }
}