@using Microsoft.AspNetCore.Components.Authorization
@using BlazorTemplate.Data
@using BlazorTemplate.Services
@using System.Security.Claims
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IUserRoleService RoleService
@inject IConfiguration Configuration 

<!-- Top Navigation Bar -->
<nav class="top-navbar">
    <button class="sidebar-toggle" id="sidebarToggle" type="button">
        <i class="fas fa-bars"></i>
    </button>

    <a href="/" class="app-brand">
        <i class="fas fa-cube"></i>
        <span>@AppName</span>
    </a>

    <div class="user-info">
        @if (isAuthenticated)
        {
            <div class="user-profile dropdown" data-bs-toggle="dropdown" aria-expanded="false">
                <div class="user-avatar">@GetUserInitials()</div>
                <div class="user-details">
                    <div class="user-name">@GetDisplayName()</div>
                    <div class="user-role">@GetPrimaryRole()</div>
                </div>
                <i class="fas fa-chevron-down ms-2" style="font-size: 0.75rem; color: #6c757d;"></i>
            </div>

            <ul class="dropdown-menu dropdown-menu-end">
                <li><a class="dropdown-item" href="/Account/Manage"><i class="fas fa-user me-2"></i>My Profile</a></li>
                <li><a class="dropdown-item" href="/Account/Manage/Email"><i class="fas fa-envelope me-2"></i>Email Settings</a></li>
                <li><a class="dropdown-item" href="/Account/Manage/ChangePassword"><i class="fas fa-key me-2"></i>Change Password</a></li>
                <li><hr class="dropdown-divider"></li>
                <li>
                    <form action="/Account/Logout" method="post" class="d-inline">
                        <input type="hidden" name="ReturnUrl" value="@currentUrl" />
                        <button type="submit" class="dropdown-item">
                            <i class="fas fa-sign-out-alt me-2"></i>Sign Out
                        </button>
                    </form>
                </li>
            </ul>
        }
        else
        {
            <div class="auth-links">
                <a href="/Account/Login" class="btn btn-outline-primary btn-sm me-2">
                    <i class="fas fa-sign-in-alt me-1"></i>Login
                </a>
                <a href="/Account/Register" class="btn btn-primary btn-sm">
                    <i class="fas fa-user-plus me-1"></i>Register
                </a>
            </div>
        }
    </div>
</nav>

@code {
    [Parameter] public string AppName { get; set; } = "";

    private AuthenticationState? authState;
    private bool isAuthenticated;
    private string? userEmail;
    private string? userName;
    private List<string> userRoles = new();
    private string currentUrl = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        AppName = Configuration["Site:Title"] ?? "Blazor Template";
        authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        isAuthenticated = authState.User?.Identity?.IsAuthenticated ?? false;

        if (isAuthenticated && authState.User != null)
        {
            // Get user email - try multiple claim types for compatibility
            userEmail = authState.User.FindFirst(ClaimTypes.Email)?.Value ??
                       authState.User.FindFirst("email")?.Value ??
                       authState.User.FindFirst("preferred_username")?.Value;

            // Get user name - try multiple claim types
            userName = authState.User.FindFirst(ClaimTypes.Name)?.Value ??
                      authState.User.FindFirst("name")?.Value ??
                      authState.User.Identity?.Name;

            // Get user roles using your role service
            if (!string.IsNullOrEmpty(userEmail))
            {
                try
                {
                    var roles = await RoleService.GetUserRolesAsync(userEmail);
                    userRoles = roles.ToList();
                }
                catch (Exception)
                {
                    // Handle case where user might not be found in role service yet
                    userRoles = new List<string>();
                }
            }
        }

        // Get current URL path for logout redirect
        currentUrl = Navigation.ToBaseRelativePath(Navigation.Uri);
    }

    protected override async Task OnParametersSetAsync()
    {
        // Re-check authentication state when parameters change
        await OnInitializedAsync();
    }

    private string GetDisplayName()
    {
        if (!string.IsNullOrEmpty(userName))
            return userName;

        if (!string.IsNullOrEmpty(userEmail))
        {
            // Extract name part from email if no display name is available
            var atIndex = userEmail.IndexOf('@');
            return atIndex > 0 ? userEmail.Substring(0, atIndex) : userEmail;
        }

        return "User";
    }

    private string GetUserInitials()
    {
        var displayName = GetDisplayName();

        if (string.IsNullOrEmpty(displayName))
            return "U";

        var parts = displayName.Split(' ', StringSplitOptions.RemoveEmptyEntries);
        if (parts.Length >= 2)
        {
            return $"{parts[0][0]}{parts[1][0]}".ToUpper();
        }
        else if (parts.Length == 1 && parts[0].Length > 0)
        {
            return parts[0][0].ToString().ToUpper();
        }

        return "U";
    }

    private string GetPrimaryRole()
    {
        if (!userRoles.Any())
            return "User";

        // Prioritize Administrator role if present
        if (userRoles.Contains("Administrator", StringComparer.OrdinalIgnoreCase))
            return "Administrator";

        // Return the first role, or "User" if none
        return userRoles.FirstOrDefault() ?? "User";
    }
}

@inject NavigationManager Navigation