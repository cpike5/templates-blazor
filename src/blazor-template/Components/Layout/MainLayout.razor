@using BlazorTemplate.Services
@inherits LayoutComponentBase
@implements IDisposable
@inject IToastService ToastService

<div class="layout-wrapper">
    <TopNavbar />
    <SidebarNavigation />
    
    <!-- Sidebar Overlay for Mobile -->
    <div class="sidebar-overlay" id="sidebarOverlay"></div>
    
    <!-- Main Content Area -->
    <main class="main-content">
        @Body
    </main>
</div>

<!-- Toast Notifications -->
<BlazorTemplate.Components.Shared.ToastNotification @ref="toastComponent" />

<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>

<script src="~/js/toast.js"></script>

@code {
    private BlazorTemplate.Components.Shared.ToastNotification? toastComponent;

    protected override void OnInitialized()
    {
        ToastService.OnToastRequested += HandleToastRequested;
    }

    private void HandleToastRequested(ToastMessage toastMessage)
    {
        if (toastComponent != null)
        {
            switch (toastMessage.Type)
            {
                case ToastType.Success:
                    toastComponent.ShowSuccess(toastMessage.Title, toastMessage.Message, toastMessage.Duration);
                    break;
                case ToastType.Error:
                    toastComponent.ShowError(toastMessage.Title, toastMessage.Message, toastMessage.Duration);
                    break;
                case ToastType.Warning:
                    toastComponent.ShowWarning(toastMessage.Title, toastMessage.Message, toastMessage.Duration);
                    break;
                case ToastType.Info:
                    toastComponent.ShowInfo(toastMessage.Title, toastMessage.Message, toastMessage.Duration);
                    break;
            }
        }
    }

    public void Dispose()
    {
        ToastService.OnToastRequested -= HandleToastRequested;
    }
}