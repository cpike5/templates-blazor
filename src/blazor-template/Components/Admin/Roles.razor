@page "/admin/roles"
@using BlazorTemplate.Components.Layout
@using BlazorTemplate.Data
@using Microsoft.AspNetCore.Authorization
@layout AdminLayout
@attribute [Authorize(Roles = "Administrator")]
@rendermode InteractiveServer

<style>
    .admin-header {
        display: flex;
        align-items: center;
        justify-content: between;
        gap: 1rem;
        margin-bottom: 2rem;
        padding-bottom: 1rem;
        border-bottom: 2px solid #e9ecef;
    }

    .admin-icon {
        width: 60px;
        height: 60px;
        border-radius: 12px;
        background: linear-gradient(135deg, var(--color-primary), var(--color-secondary));
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        font-size: 1.5rem;
        box-shadow: 0 4px 12px rgba(120, 39, 137, 0.3);
    }

    .admin-info h2 {
        margin: 0;
        font-size: 1.75rem;
        font-weight: 600;
        color: var(--color-dark);
    }

    .admin-info p {
        margin: 0.25rem 0 0 0;
        color: #6c757d;
        font-size: 1rem;
    }

    .admin-actions {
        margin-left: auto;
    }

    .stats-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 1.5rem;
        margin-bottom: 2rem;
    }

    .stat-card {
        background: white;
        border: 2px solid #e9ecef;
        border-radius: 12px;
        padding: 1.5rem;
        text-align: center;
        transition: all 0.3s ease;
    }

        .stat-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.1);
        }

    .stat-icon {
        font-size: 2rem;
        margin-bottom: 0.75rem;
    }

        .stat-icon.total {
            color: var(--color-info);
        }

        .stat-icon.system {
            color: var(--color-primary);
        }

        .stat-icon.custom {
            color: var(--color-success);
        }

        .stat-icon.assignments {
            color: var(--color-warning);
        }

    .stat-value {
        font-size: 1.75rem;
        font-weight: 600;
        color: var(--color-dark);
        margin-bottom: 0.25rem;
    }

    .stat-label {
        color: #6c757d;
        font-size: 0.875rem;
        margin: 0;
    }

    .roles-section {
        background: white;
        border: 2px solid #e9ecef;
        border-radius: 12px;
        overflow: hidden;
    }

    .section-header {
        background: #f8f9fa;
        padding: 1.5rem;
        border-bottom: 2px solid #e9ecef;
        display: flex;
        align-items: center;
        justify-content: space-between;
    }

    .section-title {
        font-size: 1.25rem;
        font-weight: 600;
        color: var(--color-dark);
        margin: 0;
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .search-filter-bar {
        display: flex;
        gap: 1rem;
        align-items: center;
        flex-wrap: wrap;
    }

    .search-input {
        min-width: 250px;
        padding: 0.5rem 1rem;
        border: 2px solid #e9ecef;
        border-radius: 8px;
        font-size: 0.875rem;
    }

        .search-input:focus {
            border-color: var(--color-primary);
            outline: none;
            box-shadow: 0 0 0 0.2rem rgba(120, 39, 137, 0.25);
        }

    .filter-dropdown {
        padding: 0.5rem 1rem;
        border: 2px solid #e9ecef;
        border-radius: 8px;
        background: white;
        font-size: 0.875rem;
        min-width: 120px;
    }

    .roles-table {
        width: 100%;
        margin: 0;
    }

        .roles-table th {
            background: #f8f9fa;
            padding: 1rem 1.5rem;
            font-weight: 600;
            color: var(--color-dark);
            border-bottom: 2px solid #e9ecef;
            white-space: nowrap;
        }

        .roles-table td {
            padding: 1rem 1.5rem;
            border-bottom: 1px solid #e9ecef;
            vertical-align: middle;
        }

        .roles-table tbody tr:hover {
            background-color: rgba(120, 39, 137, 0.05);
        }

    .role-info {
        display: flex;
        align-items: center;
        gap: 1rem;
    }

    .role-icon {
        width: 48px;
        height: 48px;
        border-radius: 12px;
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        font-size: 1.25rem;
        flex-shrink: 0;
    }

        .role-icon.administrator {
            background: linear-gradient(135deg, #dc3545, #c82333);
        }

        .role-icon.manager {
            background: linear-gradient(135deg, #ffc107, #e0a800);
        }

        .role-icon.user {
            background: linear-gradient(135deg, #17a2b8, #138496);
        }

        .role-icon.custom {
            background: linear-gradient(135deg, var(--color-primary), var(--color-secondary));
        }

    .role-details h6 {
        margin: 0 0 0.25rem 0;
        font-weight: 600;
        color: var(--color-dark);
        font-size: 1rem;
    }

    .role-details small {
        color: #6c757d;
        font-size: 0.8rem;
    }

    .role-type-badge {
        padding: 0.25rem 0.75rem;
        border-radius: 12px;
        font-size: 0.75rem;
        font-weight: 600;
        text-transform: uppercase;
        letter-spacing: 0.5px;
    }

        .role-type-badge.system {
            background: #e3f2fd;
            color: #1976d2;
        }

        .role-type-badge.custom {
            background: #f3e5f5;
            color: #7b1fa2;
        }

    .user-count {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        font-weight: 600;
        color: var(--color-dark);
    }

    .user-avatars {
        display: flex;
        margin-left: 0.5rem;
    }

    .user-avatar-sm {
        width: 24px;
        height: 24px;
        border-radius: 50%;
        background: linear-gradient(135deg, var(--color-primary), var(--color-secondary));
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        font-size: 0.7rem;
        font-weight: 600;
        border: 2px solid white;
        margin-left: -8px;
    }

        .user-avatar-sm:first-child {
            margin-left: 0;
        }

    .more-users {
        background: #6c757d;
        color: white;
    }

    .permissions-preview {
        display: flex;
        flex-wrap: wrap;
        gap: 0.25rem;
        max-width: 200px;
    }

    .permission-tag {
        padding: 0.125rem 0.5rem;
        background: #f8f9fa;
        border: 1px solid #dee2e6;
        border-radius: 4px;
        font-size: 0.7rem;
        color: #6c757d;
    }

    .action-buttons {
        display: flex;
        gap: 0.5rem;
    }

    .btn-action {
        padding: 0.375rem 0.75rem;
        border: none;
        border-radius: 6px;
        font-size: 0.75rem;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.2s ease;
        text-decoration: none;
        display: inline-flex;
        align-items: center;
        gap: 0.25rem;
    }

    .btn-view {
        background: #e8f5e9;
        color: #2e7d32;
    }

        .btn-view:hover {
            background: #c8e6c9;
            color: #1b5e20;
        }

    .btn-edit {
        background: #e3f2fd;
        color: #1976d2;
    }

        .btn-edit:hover {
            background: #bbdefb;
            color: #1565c0;
        }

    .btn-users {
        background: #f3e5f5;
        color: #7b1fa2;
    }

        .btn-users:hover {
            background: #e1bee7;
            color: #6a1b9a;
        }

    .btn-danger {
        background: #ffebee;
        color: #d32f2f;
    }

        .btn-danger:hover {
            background: #ffcdd2;
            color: #c62828;
        }

        .btn-danger:disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }

    .table-pagination {
        padding: 1.5rem;
        border-top: 2px solid #e9ecef;
        background: #f8f9fa;
        display: flex;
        justify-content: between;
        align-items: center;
    }

    .pagination-info {
        color: #6c757d;
        font-size: 0.875rem;
    }

    .pagination-controls {
        display: flex;
        gap: 0.5rem;
    }

    .pagination-btn {
        padding: 0.5rem 0.75rem;
        border: 1px solid #dee2e6;
        background: white;
        color: var(--color-dark);
        border-radius: 6px;
        font-size: 0.875rem;
        cursor: pointer;
        transition: all 0.2s ease;
    }

        .pagination-btn:hover:not(:disabled) {
            background: var(--color-primary);
            color: white;
            border-color: var(--color-primary);
        }

        .pagination-btn:disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }

        .pagination-btn.active {
            background: var(--color-primary);
            color: white;
            border-color: var(--color-primary);
        }

    .system-role-notice {
        background: #fff3cd;
        border: 1px solid #ffeaa7;
        color: #856404;
        padding: 1rem;
        border-radius: 8px;
        margin-bottom: 2rem;
        font-size: 0.9rem;
        display: flex;
        align-items: center;
        gap: 0.75rem;
    }

    /* Mobile responsive */
    @@media (max-width: 768px) {
        .admin-header

    {
        flex-direction: column;
        text-align: center;
    }

    .admin-actions {
        margin-left: 0;
    }

    .section-header {
        flex-direction: column;
        gap: 1rem;
        align-items: stretch;
    }

    .search-filter-bar {
        flex-direction: column;
    }

    .search-input {
        min-width: auto;
        width: 100%;
    }

    .roles-table {
        font-size: 0.8rem;
    }

        .roles-table td {
            padding: 0.75rem 0.5rem;
        }

    .action-buttons {
        flex-direction: column;
    }

    .permissions-preview {
        display: none;
    }

    }
</style>

<!-- Page Header -->
<div class="admin-header">
    <div class="admin-icon">
        <i class="fas fa-user-shield"></i>
    </div>
    <div class="admin-info">
        <h2>Role Management</h2>
        <p>Manage system roles and permissions</p>
    </div>
    <div class="admin-actions">
        <button class="btn btn-primary" @onclick="NavigateToCreateRole">
            <i class="fas fa-plus me-2"></i>
            Create New Role
        </button>
    </div>
</div>

<!-- System Role Notice -->
<div class="system-role-notice">
    <i class="fas fa-info-circle"></i>
    <span><strong>Note:</strong> System roles (Administrator, User) are built-in and cannot be deleted. You can modify permissions but exercise caution with critical roles.</span>
</div>

<!-- Statistics Cards -->
<div class="stats-grid">
    <div class="stat-card">
        <div class="stat-icon total">
            <i class="fas fa-user-tag"></i>
        </div>
        <div class="stat-value">@stats.TotalRoles</div>
        <p class="stat-label">Total Roles</p>
    </div>
    <div class="stat-card">
        <div class="stat-icon system">
            <i class="fas fa-cog"></i>
        </div>
        <div class="stat-value">@stats.SystemRoles</div>
        <p class="stat-label">System Roles</p>
    </div>
    <div class="stat-card">
        <div class="stat-icon custom">
            <i class="fas fa-user-plus"></i>
        </div>
        <div class="stat-value">@stats.CustomRoles</div>
        <p class="stat-label">Custom Roles</p>
    </div>
    <div class="stat-card">
        <div class="stat-icon assignments">
            <i class="fas fa-users"></i>
        </div>
        <div class="stat-value">@stats.TotalAssignments</div>
        <p class="stat-label">Total Assignments</p>
    </div>
</div>

<!-- Roles Table Section -->
<div class="roles-section">
    <div class="section-header">
        <h3 class="section-title">
            <i class="fas fa-list me-2"></i>
            All Roles
        </h3>
        <div class="search-filter-bar">
            <input type="text" class="search-input" placeholder="Search roles..." value="@searchTerm" @onchange="OnSearchChanged" />
            <select class="filter-dropdown" value="@filterType" @onchange="OnFilterChanged">
                <option value="">All Types</option>
                <option value="system">System Roles</option>
                <option value="custom">Custom Roles</option>
            </select>
        </div>
    </div>

    <table class="roles-table">
        <thead>
            <tr>
                <th>Role</th>
                <th>Type</th>
                <th>Users</th>
                <th>Permissions</th>
                <th>Created</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @if (isLoading)
            {
                <tr>
                    <td colspan="6" style="text-align: center; padding: 2rem;">
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                        <p class="mt-2">Loading roles...</p>
                    </td>
                </tr>
            }
            else if (!FilteredRoles.Any())
            {
                <tr>
                    <td colspan="6" style="text-align: center; padding: 2rem;">
                        <i class="fas fa-search text-muted" style="font-size: 2rem; margin-bottom: 1rem;"></i>
                        <p class="text-muted">No roles found matching your criteria.</p>
                    </td>
                </tr>
            }
            else
            {
                @foreach (var role in FilteredRoles)
                {
                    <tr>
                        <td>
                            <div class="role-info">
                                <div class="role-icon @GetRoleIconClass(role)">
                                    <i class="@GetRoleIcon(role)"></i>
                                </div>
                                <div class="role-details">
                                    <h6>@role.Name</h6>
                                    <small>@role.Description</small>
                                </div>
                            </div>
                        </td>
                        <td>
                            <span class="role-type-badge @(role.IsSystemRole ? "system" : "custom")">
                                @(role.IsSystemRole ? "System" : "Custom")
                            </span>
                        </td>
                        <td>
                            <div class="user-count">
                                <span>@role.UserCount</span>
                                @if (role.UserCount > 0)
                                {
                                    <div class="user-avatars">
                                        <div class="user-avatar-sm">@role.UserCount</div>
                                    </div>
                                }
                            </div>
                        </td>
                        <td>
                            <div class="permissions-preview">
                                @foreach (var permission in role.Permissions.Take(3))
                                {
                                    <span class="permission-tag">@permission</span>
                                }
                                @if (role.Permissions.Count > 3)
                                {
                                    <span class="permission-tag">+@(role.Permissions.Count - 3) more</span>
                                }
                            </div>
                        </td>
                        <td>
                            <small>@(role.IsSystemRole ? "System Default" : role.CreatedAt.ToString("MMM dd, yyyy"))</small>
                        </td>
                        <td>
                            <div class="action-buttons">
                                <button class="btn-action btn-view" @onclick="() => NavigateToViewRole(role.Id)">
                                    <i class="fas fa-eye"></i>
                                    View
                                </button>
                                @if (!role.IsSystemRole)
                                {
                                    <button class="btn-action btn-edit" @onclick="() => NavigateToEditRole(role.Id)">
                                        <i class="fas fa-edit"></i>
                                        Edit
                                    </button>
                                }
                                <button class="btn-action btn-users" @onclick="() => NavigateToRoleUsers(role.Id)">
                                    <i class="fas fa-users"></i>
                                    Users
                                </button>
                                @if (!role.IsSystemRole)
                                {
                                    <button class="btn-action btn-danger" @onclick="() => DeleteRole(role)" 
                                            disabled="@(role.UserCount > 0)">
                                        <i class="fas fa-trash"></i>
                                        Delete
                                    </button>
                                }
                            </div>
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>

    <div class="table-pagination">
        <div class="pagination-info">
            Showing @FilteredRoles.Count of @roles.Count roles
        </div>
        <div class="pagination-controls">
            <button class="pagination-btn" disabled>
                <i class="fas fa-chevron-left"></i>
            </button>
            <button class="pagination-btn active">1</button>
            <button class="pagination-btn" disabled>
                <i class="fas fa-chevron-right"></i>
            </button>
        </div>
    </div>
</div>

@using BlazorTemplate.Services
@using BlazorTemplate.Models
@inject IAdminRoleService AdminRoleService
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation

@code {
    private List<RoleDto> roles = new();
    private RoleStatsDto stats = new();
    private string searchTerm = "";
    private string filterType = "";
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        isLoading = true;
        try
        {
            roles = await AdminRoleService.GetRolesAsync();
            stats = await AdminRoleService.GetRoleStatisticsAsync();
        }
        catch (Exception ex)
        {
            // Handle error appropriately
            Console.WriteLine($"Error loading roles: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private List<RoleDto> FilteredRoles
    {
        get
        {
            var filtered = roles.AsEnumerable();

            if (!string.IsNullOrEmpty(searchTerm))
            {
                filtered = filtered.Where(r => r.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                                              (r.Description?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false));
            }

            if (!string.IsNullOrEmpty(filterType))
            {
                filtered = filterType switch
                {
                    "system" => filtered.Where(r => r.IsSystemRole),
                    "custom" => filtered.Where(r => !r.IsSystemRole),
                    _ => filtered
                };
            }

            return filtered.ToList();
        }
    }

    private void NavigateToCreateRole()
    {
        Navigation.NavigateTo("/admin/roles/new");
    }

    private void NavigateToEditRole(string roleId)
    {
        Navigation.NavigateTo($"/admin/roles/edit/{roleId}");
    }

    private void NavigateToViewRole(string roleId)
    {
        Navigation.NavigateTo($"/admin/roles/{roleId}");
    }

    private void NavigateToRoleUsers(string roleId)
    {
        Navigation.NavigateTo($"/admin/roles/{roleId}/users");
    }

    private async Task DeleteRole(RoleDto role)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", 
            $"Are you sure you want to delete the role '{role.Name}'? This action cannot be undone.");
        
        if (!confirmed) return;

        try
        {
            var result = await AdminRoleService.DeleteRoleAsync(role.Id);
            if (result.Succeeded)
            {
                await LoadData(); // Reload the data
                await JSRuntime.InvokeVoidAsync("alert", $"Role '{role.Name}' has been deleted successfully.");
            }
            else
            {
                var errors = string.Join(", ", result.Errors.Select(e => e.Description));
                await JSRuntime.InvokeVoidAsync("alert", $"Error deleting role: {errors}");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error deleting role: {ex.Message}");
        }
    }

    private string GetRoleIcon(RoleDto role)
    {
        return role.Name.ToLowerInvariant() switch
        {
            "administrator" => "fas fa-crown",
            "user" => "fas fa-user",
            "manager" => "fas fa-user-tie",
            "viewer" => "fas fa-eye",
            _ => "fas fa-user-plus"
        };
    }

    private string GetRoleIconClass(RoleDto role)
    {
        return role.Name.ToLowerInvariant() switch
        {
            "administrator" => "administrator",
            "user" => "user", 
            "manager" => "manager",
            _ => "custom"
        };
    }

    private async Task OnSearchChanged(ChangeEventArgs e)
    {
        searchTerm = e.Value?.ToString() ?? "";
        StateHasChanged();
    }

    private async Task OnFilterChanged(ChangeEventArgs e)
    {
        filterType = e.Value?.ToString() ?? "";
        StateHasChanged();
    }
}