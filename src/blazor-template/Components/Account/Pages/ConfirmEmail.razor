@page "/Account/ConfirmEmail"

@using System.Text
@using BlazorTemplate
@using BlazorTemplate.Components
@using BlazorTemplate.Components.Account.Shared
@using BlazorTemplate.Data
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities

@inject UserManager<ApplicationUser> UserManager
@inject IdentityRedirectManager RedirectManager

@layout BlazorTemplate.Components.Account.Shared.AccountLayout

<PageTitle>Confirm email</PageTitle>

<style>
    .confirm-container {
        min-height: 100vh;
        display: flex;
        align-items: center;
        justify-content: center;
        padding: 2rem 1rem;
        background: linear-gradient(135deg, var(--color-light) 0%, #f8f9fa 100%);
    }

    .confirm-card {
        background: white;
        border-radius: 16px;
        box-shadow: 0 10px 40px rgba(0, 0, 0, 0.1);
        overflow: hidden;
        max-width: 500px;
        width: 100%;
        border: none;
        text-align: center;
    }

    .status-icon {
        font-size: 4rem;
        margin: 2rem 0 1rem 0;
    }

        .status-icon.success {
            color: var(--color-success);
            animation: successPulse 2s ease-in-out;
        }

        .status-icon.error {
            color: var(--color-danger);
            animation: errorShake 0.5s ease-in-out;
        }

        .status-icon.loading {
            color: var(--color-info);
            animation: loadingSpin 2s linear infinite;
        }

    @@keyframes successPulse {
        0%

    {
        transform: scale(0.8);
        opacity: 0;
    }

    50% {
        transform: scale(1.1);
    }

    100% {
        transform: scale(1);
        opacity: 1;
    }

    }

    @@keyframes errorShake {
        0%, 100%

    {
        transform: translateX(0);
    }

    10%, 30%, 50%, 70%, 90% {
        transform: translateX(-5px);
    }

    20%, 40%, 60%, 80% {
        transform: translateX(5px);
    }

    }

    @@keyframes loadingSpin {
        0%

    {
        transform: rotate(0deg);
    }

    100% {
        transform: rotate(360deg);
    }

    }

    .card-body {
        padding: 2rem;
    }

    .status-title {
        font-size: 1.75rem;
        font-weight: 600;
        margin-bottom: 1rem;
    }

        .status-title.success {
            color: var(--color-success);
        }

        .status-title.error {
            color: var(--color-danger);
        }

        .status-title.loading {
            color: var(--color-info);
        }

    .status-message {
        color: #6c757d;
        font-size: 1.1rem;
        line-height: 1.6;
        margin-bottom: 2rem;
    }

    .status-details {
        background: #f8f9fa;
        border-radius: 8px;
        padding: 1rem;
        margin: 1.5rem 0;
        font-size: 0.9rem;
        color: #6c757d;
        border-left: 4px solid var(--color-info);
    }

        .status-details.error {
            background: #f8d7da;
            color: #721c24;
            border-left-color: var(--color-danger);
        }

    .actions {
        margin-top: 2rem;
    }

    .btn-primary {
        background: linear-gradient(135deg, var(--color-primary), var(--color-secondary));
        border: none;
        border-radius: 12px;
        padding: 0.875rem 2rem;
        font-weight: 600;
        font-size: 1rem;
        transition: all 0.3s ease;
        margin: 0.5rem;
        color: white;
        text-decoration: none;
    }

        .btn-primary:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(var(--color-primary-rgb, 120, 39, 137), 0.3);
            color: white;
            text-decoration: none;
        }

    .btn-outline-primary {
        border: 2px solid var(--color-primary);
        color: var(--color-primary);
        background: transparent;
        border-radius: 12px;
        padding: 0.875rem 2rem;
        font-weight: 600;
        font-size: 1rem;
        transition: all 0.3s ease;
        margin: 0.5rem;
        text-decoration: none;
    }

        .btn-outline-primary:hover {
            background: var(--color-primary);
            border-color: var(--color-primary);
            color: white;
            transform: translateY(-2px);
            text-decoration: none;
        }

    .help-section {
        margin-top: 2rem;
        padding-top: 2rem;
        border-top: 1px solid #dee2e6;
    }

    .help-title {
        font-size: 1.1rem;
        font-weight: 600;
        color: var(--color-dark);
        margin-bottom: 1rem;
    }

    .help-list {
        text-align: left;
        color: #6c757d;
        font-size: 0.9rem;
    }

        .help-list li {
            margin-bottom: 0.5rem;
        }

    .loading-dots {
        display: inline-block;
        animation: loadingDots 1.5s infinite;
    }

    @@keyframes loadingDots {
        0%, 20%

    {
        opacity: 0;
    }

    40% {
        opacity: 1;
    }

    60% {
        opacity: 1;
    }

    80%, 100% {
        opacity: 0;
    }

    }

    .loading-dots:after {
        content: '...';
        animation: loadingDots 1.5s infinite;
    }

    @@media (max-width: 768px) {
        .confirm-container

    {
        padding: 1rem;
    }

    .card-body {
        padding: 1.5rem;
    }

    .status-icon {
        font-size: 3rem;
    }

    .status-title {
        font-size: 1.5rem;
    }

    .status-message {
        font-size: 1rem;
    }

    .btn-primary,
    .btn-outline-primary {
        display: block;
        width: 100%;
        margin: 0.5rem 0;
    }

    }
</style>

<div class="confirm-container">
    <div class="confirm-card">
        <div class="card-body">
            @if (isProcessing)
            {
                <!-- Loading State -->
                <div class="status-icon loading">
                    <i class="fas fa-spinner"></i>
                </div>
                <h1 class="status-title loading">Confirming Email<span class="loading-dots"></span></h1>
                <p class="status-message">
                    We're verifying your email confirmation. This should only take a moment.
                </p>
            }
            else if (isSuccess)
            {
                <!-- Success State -->
                <div class="status-icon success">
                    <i class="fas fa-check-circle"></i>
                </div>
                <h1 class="status-title success">Email Confirmed!</h1>
                <p class="status-message">
                    Thank you for confirming your email address. Your account is now fully activated and ready to use.
                </p>
                <div class="status-details">
                    <strong>What's next?</strong> You can now sign in to your account and start using all available features.
                </div>
                <div class="actions">
                    <a href="Account/Login" class="btn btn-primary">
                        <i class="fas fa-sign-in-alt me-2"></i>
                        Sign In Now
                    </a>
                    <a href="/" class="btn btn-outline-primary">
                        <i class="fas fa-home me-2"></i>
                        Go to Home
                    </a>
                </div>
            }
            else
            {
                <!-- Error State -->
                <div class="status-icon error">
                    <i class="fas fa-exclamation-triangle"></i>
                </div>
                <h1 class="status-title error">Confirmation Failed</h1>
                <p class="status-message">
                    We couldn't confirm your email address. This might be due to an invalid or expired confirmation link.
                </p>

                @if (!string.IsNullOrEmpty(statusMessage))
                {
                    <div class="status-details error">
                        <strong>Error Details:</strong> @statusMessage
                    </div>
                }
                else
                {
                    <div class="status-details error">
                        <strong>Common Issues:</strong> The confirmation token may be invalid or expired.
                        Confirmation links are only valid for 24 hours after registration.
                    </div>
                }

                <div class="actions">
                    <a href="Account/ResendEmailConfirmation" class="btn btn-primary">
                        <i class="fas fa-paper-plane me-2"></i>
                        Resend Confirmation
                    </a>
                    <a href="Account/Login" class="btn btn-outline-primary">
                        <i class="fas fa-arrow-left me-2"></i>
                        Back to Login
                    </a>
                </div>

                <div class="help-section">
                    <h3 class="help-title">Need Help?</h3>
                    <ul class="help-list">
                        <li>Make sure you're using the latest confirmation email</li>
                        <li>Check if the link was copied completely</li>
                        <li>Try requesting a new confirmation email</li>
                        <li>Contact support if the problem persists</li>
                    </ul>
                </div>
            }
        </div>
    </div>
</div>

@code {
    private string? statusMessage;
    private bool isProcessing = true;
    private bool isSuccess = false;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromQuery]
    private string? UserId { get; set; }

    [SupplyParameterFromQuery]
    private string? Code { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (UserId is null || Code is null)
        {
            RedirectManager.RedirectTo("");
        }

        // Simulate processing delay for better UX
        await Task.Delay(1500);

        var user = await UserManager.FindByIdAsync(UserId);
        if (user is null)
        {
            HttpContext.Response.StatusCode = StatusCodes.Status404NotFound;
            statusMessage = $"Error loading user with ID {UserId}";
            isProcessing = false;
            isSuccess = false;
        }
        else
        {
            var code = Encoding.UTF8.GetString(WebEncoders.Base64UrlDecode(Code));
            var result = await UserManager.ConfirmEmailAsync(user, code);

            isProcessing = false;
            if (result.Succeeded)
            {
                isSuccess = true;
                statusMessage = "Thank you for confirming your email.";
            }
            else
            {
                isSuccess = false;
                statusMessage = "Error confirming your email.";
            }
        }

        StateHasChanged();
    }
}