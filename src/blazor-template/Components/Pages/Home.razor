@page "/"
@rendermode InteractiveServer
@using BlazorTemplate.Components.Layout
@using BlazorTemplate.Services
@using BlazorTemplate.Models
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject IUserManagementService UserManagementService
@inject ILogger<Home> Logger

@* Use a minimal layout for the landing page *@
@layout BlazorTemplate.Components.Layout.MainLayout

<style>
    .landing-container {
        min-height: calc(100vh - var(--topbar-height));
        display: flex;
        align-items: center;
        justify-content: center;
        background: linear-gradient(135deg, var(--color-light) 0%, #ffffff 100%);
        position: relative;
        overflow: hidden;
    }

    .landing-content {
        text-align: center;
        max-width: 800px;
        padding: 3rem 2rem;
        position: relative;
        z-index: 2;
    }

    .brand-logo {
        font-size: 4rem;
        color: var(--color-primary);
        margin-bottom: 1.5rem;
        animation: fadeInUp 1s ease-out;
    }

    .site-title {
        font-size: 3.5rem;
        font-weight: 700;
        color: var(--color-dark);
        margin-bottom: 1rem;
        animation: fadeInUp 1s ease-out 0.2s both;
        background: linear-gradient(135deg, var(--color-primary), var(--color-secondary));
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-clip: text;
    }

    .site-subtitle {
        font-size: 1.5rem;
        color: #6c757d;
        margin-bottom: 2rem;
        font-weight: 300;
        animation: fadeInUp 1s ease-out 0.4s both;
        line-height: 1.4;
    }

    .signup-blurb {
        font-size: 1.25rem;
        color: var(--color-dark);
        margin-bottom: 3rem;
        line-height: 1.6;
        animation: fadeInUp 1s ease-out 0.6s both;
        max-width: 600px;
        margin-left: auto;
        margin-right: auto;
    }

    .cta-buttons {
        display: flex;
        gap: 1.5rem;
        justify-content: center;
        flex-wrap: wrap;
        animation: fadeInUp 1s ease-out 0.8s both;
    }

    .btn-cta {
        padding: 1rem 2.5rem;
        font-size: 1.1rem;
        font-weight: 600;
        border-radius: 50px;
        text-decoration: none;
        transition: all 0.3s ease;
        border: none;
        cursor: pointer;
        display: inline-flex;
        align-items: center;
        gap: 0.75rem;
        min-width: 180px;
        justify-content: center;
    }

    .btn-primary-cta {
        background: linear-gradient(135deg, var(--color-primary), var(--color-secondary));
        color: white;
        box-shadow: 0 4px 15px rgba(120, 39, 137, 0.3);
    }

        .btn-primary-cta:hover {
            transform: translateY(-3px);
            box-shadow: 0 8px 25px rgba(120, 39, 137, 0.4);
            color: white;
            text-decoration: none;
        }

    .btn-secondary-cta {
        background: white;
        color: var(--color-primary);
        border: 2px solid var(--color-primary);
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
    }

        .btn-secondary-cta:hover {
            background: var(--color-primary);
            color: white;
            transform: translateY(-3px);
            box-shadow: 0 8px 25px rgba(120, 39, 137, 0.3);
            text-decoration: none;
        }

    .features-preview {
        margin-top: 4rem;
        animation: fadeInUp 1s ease-out 1s both;
    }

    .features-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
        gap: 2rem;
        margin-top: 2rem;
    }

    .feature-card {
        background: white;
        padding: 2rem;
        border-radius: 16px;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
        transition: all 0.3s ease;
        border: 1px solid #f0f0f0;
    }

        .feature-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 8px 30px rgba(0, 0, 0, 0.12);
        }

    .feature-icon {
        font-size: 2.5rem;
        color: var(--color-primary);
        margin-bottom: 1rem;
    }

    .feature-title {
        font-size: 1.25rem;
        font-weight: 600;
        color: var(--color-dark);
        margin-bottom: 0.75rem;
    }

    .feature-description {
        color: #6c757d;
        line-height: 1.5;
        font-size: 0.95rem;
    }

    .background-decoration {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        overflow: hidden;
        z-index: 1;
    }

    .bg-shape {
        position: absolute;
        border-radius: 50%;
        background: linear-gradient(135deg, rgba(120, 39, 137, 0.05), rgba(142, 93, 183, 0.03));
        animation: float 6s ease-in-out infinite;
    }

    .bg-shape-1 {
        width: 300px;
        height: 300px;
        top: 10%;
        right: 10%;
        animation-delay: 0s;
    }

    .bg-shape-2 {
        width: 200px;
        height: 200px;
        bottom: 20%;
        left: 10%;
        animation-delay: 2s;
    }

    .bg-shape-3 {
        width: 150px;
        height: 150px;
        top: 60%;
        right: 20%;
        animation-delay: 4s;
    }

    @@keyframes fadeInUp {
        from {
            opacity: 0;
            transform: translateY(30px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    @@keyframes float {
        0%, 100% {
            transform: translateY(0) rotate(0deg);
        }
        50% {
            transform: translateY(-20px) rotate(180deg);
        }
    }

    /* Dashboard Styles */
    .avatar-circle {
        width: 45px;
        height: 45px;
        border-radius: 50%;
        background: linear-gradient(135deg, var(--color-primary), var(--color-secondary));
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        font-weight: 600;
        font-size: 16px;
        flex-shrink: 0;
    }

    .list-group-item:hover {
        background-color: #f8f9fa;
    }

    .card-header h5, .card-header h6 {
        margin-bottom: 0;
    }

    .opacity-75 {
        opacity: 0.75 !important;
    }

    .card.bg-primary .card-title,
    .card.bg-success .card-title,
    .card.bg-warning .card-title,
    .card.bg-danger .card-title {
        font-size: 0.9rem;
        margin-bottom: 0.5rem;
    }

    .card.bg-primary h2,
    .card.bg-success h2,
    .card.bg-warning h2,
    .card.bg-danger h2 {
        font-size: 2rem;
        font-weight: 700;
    }

    /* Responsive Design */
    @@media (max-width: 768px) {
        .landing-content {
            padding: 2rem 1rem;
        }

        .site-title {
            font-size: 2.5rem;
        }

        .site-subtitle {
            font-size: 1.25rem;
        }

        .signup-blurb {
            font-size: 1.1rem;
        }

        .cta-buttons {
            flex-direction: column;
            align-items: center;
        }

        .btn-cta {
            width: 100%;
            max-width: 280px;
        }

        .brand-logo {
            font-size: 3rem;
        }

        .features-grid {
            grid-template-columns: 1fr;
            gap: 1.5rem;
        }

        /* Dashboard responsive adjustments */
        .col-md-3 {
            margin-bottom: 1rem;
        }

        .col-md-8,
        .col-md-4 {
            margin-bottom: 1rem;
        }
    }

    @@media (max-width: 480px) {
        .site-title {
            font-size: 2rem;
        }

        .site-subtitle {
            font-size: 1.1rem;
        }

        .brand-logo {
            font-size: 2.5rem;
        }

        /* Dashboard mobile adjustments */
        .card.bg-primary h2,
        .card.bg-success h2,
        .card.bg-warning h2,
        .card.bg-danger h2 {
            font-size: 1.5rem;
        }

        .avatar-circle {
            width: 35px;
            height: 35px;
            font-size: 14px;
        }

        .d-grid.gap-2 button {
            padding: 0.5rem;
            font-size: 0.9rem;
        }
    }
</style>

@if (showDashboard)
{
    <!-- Authenticated User Dashboard -->
    <ContentPage Title="Dashboard" Subtitle="@GetWelcomeMessage()">
        
        <!-- User Statistics Cards -->
        @if (userStats != null)
        {
            <div class="row mb-4">
                <div class="col-md-3">
                    <div class="card text-white bg-primary">
                        <div class="card-body">
                            <div class="d-flex justify-content-between">
                                <div>
                                    <h5 class="card-title">Total Users</h5>
                                    <h2 class="mb-0">@userStats.TotalUsers</h2>
                                </div>
                                <div class="align-self-center">
                                    <i class="fas fa-users fa-2x opacity-75"></i>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="card text-white bg-success">
                        <div class="card-body">
                            <div class="d-flex justify-content-between">
                                <div>
                                    <h5 class="card-title">Active Users</h5>
                                    <h2 class="mb-0">@userStats.ActiveUsers</h2>
                                </div>
                                <div class="align-self-center">
                                    <i class="fas fa-check-circle fa-2x opacity-75"></i>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="card text-white bg-warning">
                        <div class="card-body">
                            <div class="d-flex justify-content-between">
                                <div>
                                    <h5 class="card-title">Pending</h5>
                                    <h2 class="mb-0">@userStats.PendingUsers</h2>
                                </div>
                                <div class="align-self-center">
                                    <i class="fas fa-clock fa-2x opacity-75"></i>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="card text-white bg-danger">
                        <div class="card-body">
                            <div class="d-flex justify-content-between">
                                <div>
                                    <h5 class="card-title">Locked</h5>
                                    <h2 class="mb-0">@userStats.LockedUsers</h2>
                                </div>
                                <div class="align-self-center">
                                    <i class="fas fa-lock fa-2x opacity-75"></i>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }
        
        <div class="row">
            <!-- Recent Activity Panel -->
            <div class="col-md-8">
                <div class="card">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h5 class="mb-0">
                            <i class="fas fa-clock text-primary me-2"></i>
                            Recent Activity
                        </h5>
                        <button class="btn btn-sm btn-outline-primary" @onclick="RefreshActivity">
                            <i class="fas fa-refresh"></i>
                        </button>
                    </div>
                    <div class="card-body">
                        @if (isLoading)
                        {
                            <div class="text-center py-4">
                                <div class="spinner-border text-primary" role="status">
                                    <span class="visually-hidden">Loading...</span>
                                </div>
                            </div>
                        }
                        else if (recentActivity?.Any() == true)
                        {
                            <div class="list-group list-group-flush">
                                @foreach (var activity in recentActivity)
                                {
                                    <div class="list-group-item border-0 px-0">
                                        <div class="d-flex justify-content-between align-items-start">
                                            <div class="me-3">
                                                <i class="fas @GetActivityIcon(activity.Action) text-muted me-2"></i>
                                                <strong>@activity.Action</strong>
                                                <p class="mb-1 text-muted small">@activity.Details</p>
                                                <small class="text-muted">@activity.Timestamp.ToString("MMM dd, yyyy 'at' h:mm tt")</small>
                                            </div>
                                            @if (!string.IsNullOrEmpty(activity.IpAddress))
                                            {
                                                <small class="text-muted">@activity.IpAddress</small>
                                            }
                                        </div>
                                    </div>
                                }
                            </div>
                        }
                        else
                        {
                            <div class="text-center py-4 text-muted">
                                <i class="fas fa-info-circle fa-2x mb-3"></i>
                                <p>No recent activity to display.</p>
                            </div>
                        }
                    </div>
                </div>
            </div>
            
            <!-- Quick Actions Panel -->
            <div class="col-md-4">
                <div class="card">
                    <div class="card-header">
                        <h5 class="mb-0">
                            <i class="fas fa-bolt text-warning me-2"></i>
                            Quick Actions
                        </h5>
                    </div>
                    <div class="card-body">
                        <div class="d-grid gap-2">
                            <button class="btn btn-outline-primary" @onclick='() => NavigateTo("/users")'>
                                <i class="fas fa-users me-2"></i>
                                Manage Users
                            </button>
                            <button class="btn btn-outline-success" @onclick='() => NavigateTo("/Account/Manage")'>
                                <i class="fas fa-user-cog me-2"></i>
                                Account Settings
                            </button>
                            <button class="btn btn-outline-info" @onclick="ViewSystemInfo">
                                <i class="fas fa-info-circle me-2"></i>
                                System Information
                            </button>
                            <button class="btn btn-outline-secondary" @onclick='() => NavigateTo("/logout")'>
                                <i class="fas fa-sign-out-alt me-2"></i>
                                Sign Out
                            </button>
                        </div>
                    </div>
                </div>
                
                @if (currentUser != null)
                {
                    <div class="card mt-3">
                        <div class="card-header">
                            <h6 class="mb-0">
                                <i class="fas fa-user text-info me-2"></i>
                                Your Profile
                            </h6>
                        </div>
                        <div class="card-body">
                            <div class="d-flex align-items-center mb-3">
                                <div class="avatar-circle me-3">
                                    @currentUser.Initials
                                </div>
                                <div>
                                    <h6 class="mb-0">@currentUser.DisplayName</h6>
                                    <small class="text-muted">@currentUser.Email</small>
                                </div>
                            </div>
                            @if (currentUser.Roles.Any())
                            {
                                <div class="mb-2">
                                    <small class="text-muted">Roles:</small><br>
                                    @foreach (var role in currentUser.Roles)
                                    {
                                        <span class="badge bg-secondary me-1">@role</span>
                                    }
                                </div>
                            }
                            <small class="text-muted">
                                Status: <span class="badge @GetStatusBadgeClass(currentUser.Status)">@currentUser.Status</span>
                            </small>
                        </div>
                    </div>
                }
            </div>
        </div>

    </ContentPage>
}
else
{
    <!-- Landing Page for Non-Authenticated Users -->
    <div class="landing-container">
        <!-- Background Decorations -->
        <div class="background-decoration">
            <div class="bg-shape bg-shape-1"></div>
            <div class="bg-shape bg-shape-2"></div>
            <div class="bg-shape bg-shape-3"></div>
        </div>

        <div class="landing-content">
            <!-- Brand Logo -->
            <div class="brand-logo">
                <i class="fas fa-cube"></i>
            </div>

            <!-- Site Title -->
            <h1 class="site-title">Blazor Template</h1>
            
            <!-- Site Subtitle -->
            <p class="site-subtitle">Modern Web Application Platform</p>

            <!-- Signup Blurb -->
            <div class="signup-blurb">
                Experience the power of modern web development with our feature-rich Blazor application. 
                Built with cutting-edge technology, designed for performance, and crafted for an 
                exceptional user experience.
            </div>

            <!-- Call-to-Action Buttons -->
            <div class="cta-buttons">
                <a href="/Account/Register" class="btn-cta btn-primary-cta">
                    <i class="fas fa-rocket"></i>
                    Get Started
                </a>
                <a href="/Account/Login" class="btn-cta btn-secondary-cta">
                    <i class="fas fa-sign-in-alt"></i>
                    Sign In
                </a>
            </div>

            <!-- Features Preview -->
            <div class="features-preview">
                <div class="features-grid">
                    <div class="feature-card">
                        <div class="feature-icon">
                            <i class="fas fa-bolt"></i>
                        </div>
                        <h3 class="feature-title">Lightning Fast</h3>
                        <p class="feature-description">
                            Built with Blazor Server for exceptional performance and real-time interactivity.
                        </p>
                    </div>
                    
                    <div class="feature-card">
                        <div class="feature-icon">
                            <i class="fas fa-shield-alt"></i>
                        </div>
                        <h3 class="feature-title">Secure & Reliable</h3>
                        <p class="feature-description">
                            Enterprise-grade security with ASP.NET Core Identity and robust authentication.
                        </p>
                    </div>
                    
                    <div class="feature-card">
                        <div class="feature-icon">
                            <i class="fas fa-mobile-alt"></i>
                        </div>
                        <h3 class="feature-title">Responsive Design</h3>
                        <p class="feature-description">
                            Beautiful, responsive interface that works perfectly on all devices and screen sizes.
                        </p>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private bool showDashboard = false;
    private bool isLoading = false;
    private UserStatsDto? userStats;
    private List<UserActivityDto> recentActivity = new();
    private UserDto? currentUser;
    private string currentUserEmail = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            showDashboard = authState.User?.Identity?.IsAuthenticated ?? false;
            
            if (showDashboard && authState.User?.Identity?.Name != null)
            {
                currentUserEmail = authState.User.Identity.Name;
                await LoadDashboardData();
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error initializing dashboard");
        }
    }

    private async Task LoadDashboardData()
    {
        try
        {
            isLoading = true;
            StateHasChanged();

            // Load data sequentially to avoid DbContext concurrency issues
            // DbContext is not thread-safe and cannot handle concurrent operations
            await LoadUserStats();
            await LoadCurrentUser();
            await LoadRecentActivity();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading dashboard data");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task LoadUserStats()
    {
        try
        {
            userStats = await UserManagementService.GetUserStatisticsAsync();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading user statistics");
        }
    }

    private async Task LoadCurrentUser()
    {
        try
        {
            if (!string.IsNullOrEmpty(currentUserEmail))
            {
                currentUser = await UserManagementService.GetUserByEmailAsync(currentUserEmail);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading current user data");
        }
    }

    private async Task LoadRecentActivity()
    {
        try
        {
            if (currentUser != null)
            {
                recentActivity = await UserManagementService.GetUserActivityAsync(currentUser.Id, 10);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading recent activity");
        }
    }

    private async Task RefreshActivity()
    {
        await LoadRecentActivity();
    }

    private void NavigateTo(string url)
    {
        NavigationManager.NavigateTo(url);
    }

    private void ViewSystemInfo()
    {
        // TODO: Implement system information modal or navigate to system info page
        // For now, just navigate to a placeholder
        NavigationManager.NavigateTo("/system-info");
    }

    private string GetWelcomeMessage()
    {
        var hour = DateTime.Now.Hour;
        var greeting = hour switch
        {
            >= 0 and < 12 => "Good morning",
            >= 12 and < 17 => "Good afternoon",
            _ => "Good evening"
        };

        var userName = currentUser?.DisplayName ?? currentUserEmail.Split('@')[0];
        return $"{greeting}, {userName}! Here's your dashboard overview.";
    }

    private string GetActivityIcon(string action)
    {
        return action.ToLower() switch
        {
            "login" => "fa-sign-in-alt",
            "logout" => "fa-sign-out-alt",
            "usercreated" => "fa-user-plus",
            "userdeleted" => "fa-user-minus",
            "userupdated" => "fa-user-edit",
            "userlocked" => "fa-user-lock",
            "userunlocked" => "fa-user-check",
            "passwordreset" => "fa-key",
            "emailconfirmed" => "fa-envelope-open",
            "emailconfirmationresent" => "fa-envelope",
            "roleassigned" => "fa-user-tag",
            "roleremoved" => "fa-user-minus",
            _ => "fa-info-circle"
        };
    }

    private string GetStatusBadgeClass(string status)
    {
        return status.ToLower() switch
        {
            "active" => "bg-success",
            "pending" => "bg-warning",
            "locked" => "bg-danger",
            _ => "bg-secondary"
        };
    }
}